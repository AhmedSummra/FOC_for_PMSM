
FOC_SENSORED_TRIAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006868  08006868  00016868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a50  08006a50  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a58  08006a58  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a5c  08006a5c  00016a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000060  08006abc  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006abc  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b205  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001afe  00000000  00000000  0002b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b4  00000000  00000000  0002d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022caa  00000000  00000000  0002e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc38  00000000  00000000  00050e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbe27  00000000  00000000  0005eaae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034dc  00000000  00000000  0013a8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0013ddb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006850 	.word	0x08006850

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	08006850 	.word	0x08006850

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f001 ff5b 	bl	8002d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f891 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 fa23 	bl	80012f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f969 	bl	8001188 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000eb6:	f000 f8eb 	bl	8001090 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  int pwma, pwmb, pwmc;
  root_init0(&mainStruct);
 8000eba:	4841      	ldr	r0, [pc, #260]	; (8000fc0 <main+0x120>)
 8000ebc:	f001 fc78 	bl	80027b0 <root_init0>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4840      	ldr	r0, [pc, #256]	; (8000fc4 <main+0x124>)
 8000ec4:	f003 fcbe 	bl	8004844 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ec8:	2104      	movs	r1, #4
 8000eca:	483e      	ldr	r0, [pc, #248]	; (8000fc4 <main+0x124>)
 8000ecc:	f003 fcba 	bl	8004844 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	483c      	ldr	r0, [pc, #240]	; (8000fc4 <main+0x124>)
 8000ed4:	f003 fcb6 	bl	8004844 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	483a      	ldr	r0, [pc, #232]	; (8000fc4 <main+0x124>)
 8000edc:	f004 fa20 	bl	8005320 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4838      	ldr	r0, [pc, #224]	; (8000fc4 <main+0x124>)
 8000ee4:	f004 fa1c 	bl	8005320 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4836      	ldr	r0, [pc, #216]	; (8000fc4 <main+0x124>)
 8000eec:	f004 fa18 	bl	8005320 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 mainStruct.p_extIn->_ia_out = ADC_ReadCurrentPhaseA();
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <main+0x120>)
 8000ef2:	681c      	ldr	r4, [r3, #0]
 8000ef4:	f000 fae0 	bl	80014b8 <ADC_ReadCurrentPhaseA>
 8000ef8:	eeb0 7a40 	vmov.f32	s14, s0
 8000efc:	eef0 7a60 	vmov.f32	s15, s1
 8000f00:	ed84 7b08 	vstr	d7, [r4, #32]
	 mainStruct.p_extIn->_ib_out = ADC_ReadCurrentPhaseB();
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <main+0x120>)
 8000f06:	681c      	ldr	r4, [r3, #0]
 8000f08:	f000 fb32 	bl	8001570 <ADC_ReadCurrentPhaseB>
 8000f0c:	eeb0 7a40 	vmov.f32	s14, s0
 8000f10:	eef0 7a60 	vmov.f32	s15, s1
 8000f14:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
	 mainStruct.p_extIn->_ic_out = ADC_ReadCurrentPhaseC();
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <main+0x120>)
 8000f1a:	681c      	ldr	r4, [r3, #0]
 8000f1c:	f000 fb84 	bl	8001628 <ADC_ReadCurrentPhaseC>
 8000f20:	eeb0 7a40 	vmov.f32	s14, s0
 8000f24:	eef0 7a60 	vmov.f32	s15, s1
 8000f28:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30

	 ADC_ReadEncoder(&encoderStruct);
 8000f2c:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <main+0x128>)
 8000f2e:	f000 fbd5 	bl	80016dc <ADC_ReadEncoder>
	 mainStruct.p_extIn->_pmsm1_out[0] = encoderStruct.te;
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <main+0x120>)
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <main+0x128>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 mainStruct.p_extIn->_pmsm1_out[1] = encoderStruct.wm;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <main+0x120>)
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <main+0x128>)
 8000f46:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f4a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 mainStruct.p_extIn->_pmsm1_out[2] = encoderStruct.theta;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <main+0x120>)
 8000f50:	6819      	ldr	r1, [r3, #0]
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <main+0x128>)
 8000f54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f58:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	 root_step1(&mainStruct);
 8000f5c:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <main+0x120>)
 8000f5e:	f001 fcd3 	bl	8002908 <root_step1>
	 root_step0(&mainStruct);
 8000f62:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <main+0x120>)
 8000f64:	f000 fbf4 	bl	8001750 <root_step0>

	 pwma = PWM_Regulate(mainStruct.p_Sinks->_three_phase_inverter1_ina);
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <main+0x120>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000f70:	eeb0 0a47 	vmov.f32	s0, s14
 8000f74:	eef0 0a67 	vmov.f32	s1, s15
 8000f78:	f000 fbba 	bl	80016f0 <PWM_Regulate>
 8000f7c:	60f8      	str	r0, [r7, #12]
	 pwmb = PWM_Regulate(mainStruct.p_Sinks->_three_phase_inverter1_inb);
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <main+0x120>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000f86:	eeb0 0a47 	vmov.f32	s0, s14
 8000f8a:	eef0 0a67 	vmov.f32	s1, s15
 8000f8e:	f000 fbaf 	bl	80016f0 <PWM_Regulate>
 8000f92:	60b8      	str	r0, [r7, #8]
	 pwmc = PWM_Regulate(mainStruct.p_Sinks->_three_phase_inverter1_inc);
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <main+0x120>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8000f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa0:	eef0 0a67 	vmov.f32	s1, s15
 8000fa4:	f000 fba4 	bl	80016f0 <PWM_Regulate>
 8000fa8:	6078      	str	r0, [r7, #4]

	 TIM1->CCR1 = pwma;
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <main+0x12c>)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6353      	str	r3, [r2, #52]	; 0x34
	 TIM1->CCR2 = pwmb;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <main+0x12c>)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	6393      	str	r3, [r2, #56]	; 0x38
	 TIM1->CCR3 = pwmc;
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <main+0x12c>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	63d3      	str	r3, [r2, #60]	; 0x3c
	 mainStruct.p_extIn->_ia_out = ADC_ReadCurrentPhaseA();
 8000fbc:	e798      	b.n	8000ef0 <main+0x50>
 8000fbe:	bf00      	nop
 8000fc0:	20000114 	.word	0x20000114
 8000fc4:	200000c4 	.word	0x200000c4
 8000fc8:	20000128 	.word	0x20000128
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2234      	movs	r2, #52	; 0x34
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 fb4b 	bl	800567a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <SystemClock_Config+0xb8>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a22      	ldr	r2, [pc, #136]	; (8001088 <SystemClock_Config+0xb8>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <SystemClock_Config+0xb8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <SystemClock_Config+0xbc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <SystemClock_Config+0xbc>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <SystemClock_Config+0xbc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4618      	mov	r0, r3
 8001046:	f003 f8b7 	bl	80041b8 <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001050:	f000 fb78 	bl	8001744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fd8c 	bl	8003b8c <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800107a:	f000 fb63 	bl	8001744 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	; 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <MX_ADC1_Init+0xec>)
 80010a4:	4a36      	ldr	r2, [pc, #216]	; (8001180 <MX_ADC1_Init+0xf0>)
 80010a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <MX_ADC1_Init+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <MX_ADC1_Init+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010b4:	4b31      	ldr	r3, [pc, #196]	; (800117c <MX_ADC1_Init+0xec>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <MX_ADC1_Init+0xec>)
 80010bc:	2201      	movs	r2, #1
 80010be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <MX_ADC1_Init+0xec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <MX_ADC1_Init+0xec>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <MX_ADC1_Init+0xec>)
 80010d0:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <MX_ADC1_Init+0xf4>)
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <MX_ADC1_Init+0xec>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <MX_ADC1_Init+0xec>)
 80010dc:	2204      	movs	r2, #4
 80010de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <MX_ADC1_Init+0xec>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <MX_ADC1_Init+0xec>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ee:	4823      	ldr	r0, [pc, #140]	; (800117c <MX_ADC1_Init+0xec>)
 80010f0:	f001 fea8 	bl	8002e44 <HAL_ADC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 fb23 	bl	8001744 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010fe:	2309      	movs	r3, #9
 8001100:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001106:	2306      	movs	r3, #6
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	481b      	ldr	r0, [pc, #108]	; (800117c <MX_ADC1_Init+0xec>)
 8001110:	f002 f87a 	bl	8003208 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800111a:	f000 fb13 	bl	8001744 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	2301      	movs	r3, #1
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001122:	2302      	movs	r3, #2
 8001124:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4814      	ldr	r0, [pc, #80]	; (800117c <MX_ADC1_Init+0xec>)
 800112c:	f002 f86c 	bl	8003208 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001136:	f000 fb05 	bl	8001744 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800113a:	2304      	movs	r3, #4
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800113e:	2303      	movs	r3, #3
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_ADC1_Init+0xec>)
 8001148:	f002 f85e 	bl	8003208 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001152:	f000 faf7 	bl	8001744 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001156:	2306      	movs	r3, #6
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800115a:	2304      	movs	r3, #4
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_ADC1_Init+0xec>)
 8001164:	f002 f850 	bl	8003208 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800116e:	f000 fae9 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000007c 	.word	0x2000007c
 8001180:	40012000 	.word	0x40012000
 8001184:	0f000001 	.word	0x0f000001

08001188 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b096      	sub	sp, #88	; 0x58
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 fa5a 	bl	800567a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011c8:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <MX_TIM1_Init+0x16c>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011ce:	220f      	movs	r2, #15
 80011d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011d4:	2220      	movs	r2, #32
 80011d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011da:	2264      	movs	r2, #100	; 0x64
 80011dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f0:	483f      	ldr	r0, [pc, #252]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011f2:	f003 fa7f 	bl	80046f4 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011fc:	f000 faa2 	bl	8001744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800120a:	4619      	mov	r1, r3
 800120c:	4838      	ldr	r0, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x168>)
 800120e:	f003 fca3 	bl	8004b58 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001218:	f000 fa94 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800121c:	4834      	ldr	r0, [pc, #208]	; (80012f0 <MX_TIM1_Init+0x168>)
 800121e:	f003 fab8 	bl	8004792 <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001228:	f000 fa8c 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001234:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001238:	4619      	mov	r1, r3
 800123a:	482d      	ldr	r0, [pc, #180]	; (80012f0 <MX_TIM1_Init+0x168>)
 800123c:	f004 f92a 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001246:	f000 fa7d 	bl	8001744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	; 0x60
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	4820      	ldr	r0, [pc, #128]	; (80012f0 <MX_TIM1_Init+0x168>)
 8001270:	f003 fbb0 	bl	80049d4 <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800127a:	f000 fa63 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	2204      	movs	r2, #4
 8001284:	4619      	mov	r1, r3
 8001286:	481a      	ldr	r0, [pc, #104]	; (80012f0 <MX_TIM1_Init+0x168>)
 8001288:	f003 fba4 	bl	80049d4 <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001292:	f000 fa57 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	2208      	movs	r2, #8
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <MX_TIM1_Init+0x168>)
 80012a0:	f003 fb98 	bl	80049d4 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80012aa:	f000 fa4b 	bl	8001744 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x168>)
 80012d2:	f004 f95b 	bl	800558c <HAL_TIMEx_ConfigBreakDeadTime>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80012dc:	f000 fa32 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x168>)
 80012e2:	f001 fc7b 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 80012e6:	bf00      	nop
 80012e8:	3758      	adds	r7, #88	; 0x58
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000c4 	.word	0x200000c4
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a2d      	ldr	r2, [pc, #180]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <MX_GPIO_Init+0xf0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <MX_GPIO_Init+0xf0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <MX_GPIO_Init+0xf0>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	481a      	ldr	r0, [pc, #104]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001384:	f002 fbe8 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4814      	ldr	r0, [pc, #80]	; (80013f0 <MX_GPIO_Init+0xf8>)
 80013a0:	f002 fa46 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013a4:	230c      	movs	r3, #12
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b4:	2307      	movs	r3, #7
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <MX_GPIO_Init+0xf4>)
 80013c0:	f002 fa36 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013c4:	2320      	movs	r3, #32
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_GPIO_Init+0xf4>)
 80013dc:	f002 fa28 	bl	8003830 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020800 	.word	0x40020800

080013f4 <ADC_SelectChannel1>:

/* USER CODE BEGIN 4 */
/****************************** ADC FUNCTIONS DEFINITIONS ************************************/

void ADC_SelectChannel1(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
	  sConfig.Channel = ADC_CHANNEL_9;
 8001406:	2309      	movs	r3, #9
 8001408:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800140e:	2306      	movs	r3, #6
 8001410:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <ADC_SelectChannel1+0x3c>)
 8001418:	f001 fef6 	bl	8003208 <HAL_ADC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <ADC_SelectChannel1+0x32>
	  {
	    Error_Handler();
 8001422:	f000 f98f 	bl	8001744 <Error_Handler>
	  }

}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000007c 	.word	0x2000007c

08001434 <ADC_SelectChannel2>:

void ADC_SelectChannel2(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001446:	2301      	movs	r3, #1
 8001448:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800144a:	2301      	movs	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800144e:	2306      	movs	r3, #6
 8001450:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <ADC_SelectChannel2+0x3c>)
 8001458:	f001 fed6 	bl	8003208 <HAL_ADC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <ADC_SelectChannel2+0x32>
	  {
	    Error_Handler();
 8001462:	f000 f96f 	bl	8001744 <Error_Handler>
	  }

}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000007c 	.word	0x2000007c

08001474 <ADC_SelectChannel3>:

void ADC_SelectChannel3(void){
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8001486:	2304      	movs	r3, #4
 8001488:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800148e:	2306      	movs	r3, #6
 8001490:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <ADC_SelectChannel3+0x3c>)
 8001498:	f001 feb6 	bl	8003208 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <ADC_SelectChannel3+0x32>
	  {
	    Error_Handler();
 80014a2:	f000 f94f 	bl	8001744 <Error_Handler>
	  }

}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000007c 	.word	0x2000007c
 80014b4:	00000000 	.word	0x00000000

080014b8 <ADC_ReadCurrentPhaseA>:
	    Error_Handler();
	  }

}

real_t ADC_ReadCurrentPhaseA(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
	real_t voltage=0;           /* sensed voltage raw value */
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	real_t Ia_real_value;  /* Phase A current real value without our scale */

	ADC_SelectChannel1();
 80014ca:	f7ff ff93 	bl	80013f4 <ADC_SelectChannel1>
	HAL_ADC_Start(&hadc1);
 80014ce:	4824      	ldr	r0, [pc, #144]	; (8001560 <ADC_ReadCurrentPhaseA+0xa8>)
 80014d0:	f001 fcfc 	bl	8002ecc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80014d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014d8:	4821      	ldr	r0, [pc, #132]	; (8001560 <ADC_ReadCurrentPhaseA+0xa8>)
 80014da:	f001 fdfc 	bl	80030d6 <HAL_ADC_PollForConversion>
	Adc_PhaseA_Current = HAL_ADC_GetValue(&hadc1);
 80014de:	4820      	ldr	r0, [pc, #128]	; (8001560 <ADC_ReadCurrentPhaseA+0xa8>)
 80014e0:	f001 fe84 	bl	80031ec <HAL_ADC_GetValue>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <ADC_ReadCurrentPhaseA+0xac>)
 80014ea:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80014ec:	481c      	ldr	r0, [pc, #112]	; (8001560 <ADC_ReadCurrentPhaseA+0xa8>)
 80014ee:	f001 fdbf 	bl	8003070 <HAL_ADC_Stop>

	voltage = Adc_PhaseA_Current * (ADC_MAX_VOLTAGE/ADC_RESOLUTION);            /* getting the actual sensed voltage (from 0 to 5 volts ) from this reading by dividing this
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <ADC_ReadCurrentPhaseA+0xac>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ffd8 	bl	80004ac <__aeabi_i2d>
 80014fc:	a314      	add	r3, pc, #80	; (adr r3, 8001550 <ADC_ReadCurrentPhaseA+0x98>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f83d 	bl	8000580 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		                                           reading by the resolution of the ADC (2^12) and multiplying it by 3.3 */

	Ia_real_value = (voltage-(SENSOR_MID_VOLTAGE)) / (SENSOR_SENSITIVITY);
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <ADC_ReadCurrentPhaseA+0xb0>)
 8001514:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001518:	f7fe fe7a 	bl	8000210 <__aeabi_dsub>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	a30c      	add	r3, pc, #48	; (adr r3, 8001558 <ADC_ReadCurrentPhaseA+0xa0>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f953 	bl	80007d4 <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	e9c7 2300 	strd	r2, r3, [r7]
	//PhaseA_Real_Current = Ia_real_value;
	return Ia_real_value;
 8001536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800153a:	ec43 2b17 	vmov	d7, r2, r3
}
 800153e:	eeb0 0a47 	vmov.f32	s0, s14
 8001542:	eef0 0a67 	vmov.f32	s1, s15
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	f3af 8000 	nop.w
 8001550:	e734d9b4 	.word	0xe734d9b4
 8001554:	3f4a680c 	.word	0x3f4a680c
 8001558:	9999999a 	.word	0x9999999a
 800155c:	3f999999 	.word	0x3f999999
 8001560:	2000007c 	.word	0x2000007c
 8001564:	2000010c 	.word	0x2000010c
 8001568:	40040000 	.word	0x40040000
 800156c:	00000000 	.word	0x00000000

08001570 <ADC_ReadCurrentPhaseB>:

real_t ADC_ReadCurrentPhaseB(void){
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
	real_t voltage=0;           /* sensed voltage raw value */
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	real_t Ib_real_value;  /* Phase B current real value without our scale */

	ADC_SelectChannel2();
 8001582:	f7ff ff57 	bl	8001434 <ADC_SelectChannel2>
	HAL_ADC_Start(&hadc1);
 8001586:	4824      	ldr	r0, [pc, #144]	; (8001618 <ADC_ReadCurrentPhaseB+0xa8>)
 8001588:	f001 fca0 	bl	8002ecc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800158c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001590:	4821      	ldr	r0, [pc, #132]	; (8001618 <ADC_ReadCurrentPhaseB+0xa8>)
 8001592:	f001 fda0 	bl	80030d6 <HAL_ADC_PollForConversion>
	Adc_PhaseB_Current = HAL_ADC_GetValue(&hadc1);
 8001596:	4820      	ldr	r0, [pc, #128]	; (8001618 <ADC_ReadCurrentPhaseB+0xa8>)
 8001598:	f001 fe28 	bl	80031ec <HAL_ADC_GetValue>
 800159c:	4603      	mov	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <ADC_ReadCurrentPhaseB+0xac>)
 80015a2:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <ADC_ReadCurrentPhaseB+0xa8>)
 80015a6:	f001 fd63 	bl	8003070 <HAL_ADC_Stop>
	voltage = Adc_PhaseB_Current * (ADC_MAX_VOLTAGE/ADC_RESOLUTION);              /* getting the actual sensed voltage (from 0 to 3.3 volts ) from this reading by dividing this
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <ADC_ReadCurrentPhaseB+0xac>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff7c 	bl	80004ac <__aeabi_i2d>
 80015b4:	a314      	add	r3, pc, #80	; (adr r3, 8001608 <ADC_ReadCurrentPhaseB+0x98>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe ffe1 	bl	8000580 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		                                           reading by the resolution of the ADC (2^12) and multiplying it by 3.3 */

	Ib_real_value = (voltage-(SENSOR_MID_VOLTAGE)) / (SENSOR_SENSITIVITY);
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <ADC_ReadCurrentPhaseB+0xb0>)
 80015cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d0:	f7fe fe1e 	bl	8000210 <__aeabi_dsub>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	a30c      	add	r3, pc, #48	; (adr r3, 8001610 <ADC_ReadCurrentPhaseB+0xa0>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f8f7 	bl	80007d4 <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	e9c7 2300 	strd	r2, r3, [r7]

	return Ib_real_value;
 80015ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80015f6:	eeb0 0a47 	vmov.f32	s0, s14
 80015fa:	eef0 0a67 	vmov.f32	s1, s15
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	f3af 8000 	nop.w
 8001608:	e734d9b4 	.word	0xe734d9b4
 800160c:	3f4a680c 	.word	0x3f4a680c
 8001610:	9999999a 	.word	0x9999999a
 8001614:	3f999999 	.word	0x3f999999
 8001618:	2000007c 	.word	0x2000007c
 800161c:	2000010e 	.word	0x2000010e
 8001620:	40040000 	.word	0x40040000
 8001624:	00000000 	.word	0x00000000

08001628 <ADC_ReadCurrentPhaseC>:

real_t ADC_ReadCurrentPhaseC(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
	real_t voltage=0;           /* sensed voltage raw value */
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9c7 2302 	strd	r2, r3, [r7, #8]
	real_t Ic_real_value;  /* Phase C current real value without our scale */

	ADC_SelectChannel3();
 800163a:	f7ff ff1b 	bl	8001474 <ADC_SelectChannel3>
	HAL_ADC_Start(&hadc1);
 800163e:	4824      	ldr	r0, [pc, #144]	; (80016d0 <ADC_ReadCurrentPhaseC+0xa8>)
 8001640:	f001 fc44 	bl	8002ecc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001644:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001648:	4821      	ldr	r0, [pc, #132]	; (80016d0 <ADC_ReadCurrentPhaseC+0xa8>)
 800164a:	f001 fd44 	bl	80030d6 <HAL_ADC_PollForConversion>
	Adc_PhaseC_Current = HAL_ADC_GetValue(&hadc1);
 800164e:	4820      	ldr	r0, [pc, #128]	; (80016d0 <ADC_ReadCurrentPhaseC+0xa8>)
 8001650:	f001 fdcc 	bl	80031ec <HAL_ADC_GetValue>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <ADC_ReadCurrentPhaseC+0xac>)
 800165a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800165c:	481c      	ldr	r0, [pc, #112]	; (80016d0 <ADC_ReadCurrentPhaseC+0xa8>)
 800165e:	f001 fd07 	bl	8003070 <HAL_ADC_Stop>
	voltage = Adc_PhaseC_Current * (ADC_MAX_VOLTAGE/ADC_RESOLUTION);                /* getting the actual sensed voltage (from 0 to 3.3 volts ) from this reading by dividing this
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <ADC_ReadCurrentPhaseC+0xac>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff20 	bl	80004ac <__aeabi_i2d>
 800166c:	a314      	add	r3, pc, #80	; (adr r3, 80016c0 <ADC_ReadCurrentPhaseC+0x98>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ff85 	bl	8000580 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		                                           reading by the resolution of the ADC (2^12) and multiplying it by 3.3 */

	Ic_real_value = (voltage-(SENSOR_MID_VOLTAGE)) / (SENSOR_SENSITIVITY);
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <ADC_ReadCurrentPhaseC+0xb0>)
 8001684:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001688:	f7fe fdc2 	bl	8000210 <__aeabi_dsub>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	a30c      	add	r3, pc, #48	; (adr r3, 80016c8 <ADC_ReadCurrentPhaseC+0xa0>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7ff f89b 	bl	80007d4 <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	e9c7 2300 	strd	r2, r3, [r7]

	return Ic_real_value;
 80016a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80016ae:	eeb0 0a47 	vmov.f32	s0, s14
 80016b2:	eef0 0a67 	vmov.f32	s1, s15
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	f3af 8000 	nop.w
 80016c0:	e734d9b4 	.word	0xe734d9b4
 80016c4:	3f4a680c 	.word	0x3f4a680c
 80016c8:	9999999a 	.word	0x9999999a
 80016cc:	3f999999 	.word	0x3f999999
 80016d0:	2000007c 	.word	0x2000007c
 80016d4:	20000110 	.word	0x20000110
 80016d8:	40040000 	.word	0x40040000

080016dc <ADC_ReadEncoder>:

void ADC_ReadEncoder(encoder_out* a){
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

	/* write encoder function and read from channel 4*/
	/* hello guys */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <PWM_Regulate>:

int PWM_Regulate(real_t input){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	ed87 0b00 	vstr	d0, [r7]
	real_t a = input;
 80016fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int b;

	b = (a+1) * 50;
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <PWM_Regulate+0x4c>)
 8001708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800170c:	f7fe fd82 	bl	8000214 <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <PWM_Regulate+0x50>)
 800171e:	f7fe ff2f 	bl	8000580 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f9c3 	bl	8000ab4 <__aeabi_d2iz>
 800172e:	4603      	mov	r3, r0
 8001730:	60fb      	str	r3, [r7, #12]

	return b;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	3ff00000 	.word	0x3ff00000
 8001740:	40490000 	.word	0x40490000

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <root_step0>:

//@cmp.def.end


// Model entry point functions
void root_step0(root_ModelData *p_m_Data) {
 8001750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001754:	b0ff      	sub	sp, #508	; 0x1fc
 8001756:	af00      	add	r7, sp, #0
 8001758:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800175c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001760:	6018      	str	r0, [r3, #0]
    root_ExtIn *ext_In = (root_ExtIn *) p_m_Data->p_extIn;
 8001762:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001766:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    root_ExtOut *ext_Out = (root_ExtOut *) p_m_Data->p_extOut;
 8001772:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001776:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    root_ModelSinks *m_Sinks = (root_ModelSinks *) p_m_Data->p_Sinks;
 8001782:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001786:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    root_ModelStates *m_States = (root_ModelStates *) p_m_Data->p_States;
 8001792:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001796:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    //////////////////////////////////////////////////////////////////////////
    // Local variables
    //////////////////////////////////////////////////////////////////////////
    //@cmp.var.start
    real_t _constant1__out = 1.0;
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b68      	ldr	r3, [pc, #416]	; (8001948 <root_step0+0x1f8>)
 80017a8:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
    real_t _current_regulation_constant1__out = 0.00055;
 80017ac:	a358      	add	r3, pc, #352	; (adr r3, 8001910 <root_step0+0x1c0>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
    real_t _current_regulation_constant2__out = 0.00025;
 80017b6:	a358      	add	r3, pc, #352	; (adr r3, 8001918 <root_step0+0x1c8>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
    real_t _current_regulation_constant3__out = 0.09;
 80017c0:	a357      	add	r3, pc, #348	; (adr r3, 8001920 <root_step0+0x1d0>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    real_t _current_regulation_integrator1__out;
    real_t _current_regulation_integrator2__out;
    real_t _rate_transition2_output__out;
    real_t _subsystem1_svpwm_references_generator1_constant1__out = 0.5;
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	4b5f      	ldr	r3, [pc, #380]	; (800194c <root_step0+0x1fc>)
 80017d0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    real_t _subsystem1_svpwm_references_generator1_constant2__out = 0.5;
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b5c      	ldr	r3, [pc, #368]	; (800194c <root_step0+0x1fc>)
 80017da:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
    real_t _subsystem1_svpwm_references_generator1_constant3__out = 0.5;
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b5a      	ldr	r3, [pc, #360]	; (800194c <root_step0+0x1fc>)
 80017e4:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
    //////////////////////////////////////////////////////////////////////////
    // Output block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.out.block.start
    // Generated from the component: Current_regulation.Integrator1
    _current_regulation_integrator1__out = m_States->_current_regulation_integrator1__state;
 80017e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
    // Generated from the component: Current_regulation.Integrator2
    _current_regulation_integrator2__out = m_States->_current_regulation_integrator2__state;
 80017f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017fc:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    // Generated from the component: Rate Transition2.Output
    _rate_transition2_output__out = m_States->_rate_transition2_output__state;
 8001800:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001804:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001808:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    // Generated from the component: current_command_generator.MTPA
    _current_command_generator_mtpa__is = _rate_transition2_output__out;
 800180c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001810:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    {
        if ( _current_command_generator_mtpa__is > 1e-4 )     {
 8001814:	a344      	add	r3, pc, #272	; (adr r3, 8001928 <root_step0+0x1d8>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800181e:	f7ff f93f 	bl	8000aa0 <__aeabi_dcmpgt>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8095 	beq.w	8001954 <root_step0+0x204>
            _current_command_generator_mtpa__id_ref = ( 0.09 - sqrtf ( 0.09 * 0.09 + 8 * ( 0.00055 - 0.00025 ) * ( 0.00055 - 0.00025 ) * _current_command_generator_mtpa__is * _current_command_generator_mtpa__is ) ) / 4.0 / ( 0.00055 - 0.00025 ) ;
 800182a:	a341      	add	r3, pc, #260	; (adr r3, 8001930 <root_step0+0x1e0>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8001834:	f7fe fea4 	bl	8000580 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001844:	f7fe fe9c 	bl	8000580 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	a339      	add	r3, pc, #228	; (adr r3, 8001938 <root_step0+0x1e8>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fcdd 	bl	8000214 <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f94f 	bl	8000b04 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	ee00 3a10 	vmov	s0, r3
 800186c:	f003 ffe4 	bl	8005838 <sqrtf>
 8001870:	ee10 3a10 	vmov	r3, s0
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe2b 	bl	80004d0 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	a128      	add	r1, pc, #160	; (adr r1, 8001920 <root_step0+0x1d0>)
 8001880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001884:	f7fe fcc4 	bl	8000210 <__aeabi_dsub>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <root_step0+0x200>)
 8001896:	f7fe ff9d 	bl	80007d4 <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	a327      	add	r3, pc, #156	; (adr r3, 8001940 <root_step0+0x1f0>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe ff94 	bl	80007d4 <__aeabi_ddiv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
            _current_command_generator_mtpa__iq_ref = sqrtf ( _current_command_generator_mtpa__is * _current_command_generator_mtpa__is - _current_command_generator_mtpa__id_ref * _current_command_generator_mtpa__id_ref ) ;
 80018b4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80018b8:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80018bc:	f7fe fe60 	bl	8000580 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4690      	mov	r8, r2
 80018c6:	4699      	mov	r9, r3
 80018c8:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80018cc:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80018d0:	f7fe fe56 	bl	8000580 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4640      	mov	r0, r8
 80018da:	4649      	mov	r1, r9
 80018dc:	f7fe fc98 	bl	8000210 <__aeabi_dsub>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f90c 	bl	8000b04 <__aeabi_d2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	ee00 3a10 	vmov	s0, r3
 80018f2:	f003 ffa1 	bl	8005838 <sqrtf>
 80018f6:	ee10 3a10 	vmov	r3, s0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fde8 	bl	80004d0 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
 8001908:	e030      	b.n	800196c <root_step0+0x21c>
 800190a:	bf00      	nop
 800190c:	f3af 8000 	nop.w
 8001910:	01a36e2f 	.word	0x01a36e2f
 8001914:	3f4205bc 	.word	0x3f4205bc
 8001918:	d2f1a9fc 	.word	0xd2f1a9fc
 800191c:	3f30624d 	.word	0x3f30624d
 8001920:	70a3d70a 	.word	0x70a3d70a
 8001924:	3fb70a3d 	.word	0x3fb70a3d
 8001928:	eb1c432d 	.word	0xeb1c432d
 800192c:	3f1a36e2 	.word	0x3f1a36e2
 8001930:	be769dc2 	.word	0xbe769dc2
 8001934:	3ea828c0 	.word	0x3ea828c0
 8001938:	98c7e282 	.word	0x98c7e282
 800193c:	3f8096bb 	.word	0x3f8096bb
 8001940:	30553262 	.word	0x30553262
 8001944:	3f33a92a 	.word	0x3f33a92a
 8001948:	3ff00000 	.word	0x3ff00000
 800194c:	3fe00000 	.word	0x3fe00000
 8001950:	40100000 	.word	0x40100000
        }
        else     {
            _current_command_generator_mtpa__id_ref = 0.0 ;
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
            _current_command_generator_mtpa__iq_ref = 0.0 ;
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
        }
    }
    // Generated from the component: I_abc_dq1.abc to alpha beta
    _i_abc_dq1_abc_to_alpha_beta__alpha = (2.0 * ext_In->_ia_out - ext_In->_ib_out - ext_In->_ic_out) * 0.3333333333333333;
 800196c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001970:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	f7fe fc4c 	bl	8000214 <__adddf3>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001988:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800198c:	f7fe fc40 	bl	8000210 <__aeabi_dsub>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800199c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019a0:	f7fe fc36 	bl	8000210 <__aeabi_dsub>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	a3e5      	add	r3, pc, #916	; (adr r3, 8001d44 <root_step0+0x5f4>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fde5 	bl	8000580 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    _i_abc_dq1_abc_to_alpha_beta__beta = (ext_In->_ib_out - ext_In->_ic_out) * 0.5773502691896258;
 80019be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019c2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019ca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019ce:	f7fe fc1f 	bl	8000210 <__aeabi_dsub>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	a3dc      	add	r3, pc, #880	; (adr r3, 8001d4c <root_step0+0x5fc>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fdce 	bl	8000580 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
    _i_abc_dq1_abc_to_alpha_beta__gamma = (ext_In->_ia_out + ext_In->_ib_out + ext_In->_ic_out) * 0.3333333333333333;
 80019ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80019f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019f8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019fc:	f7fe fc0a 	bl	8000214 <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a0c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a10:	f7fe fc00 	bl	8000214 <__adddf3>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	a3c9      	add	r3, pc, #804	; (adr r3, 8001d44 <root_step0+0x5f4>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdad 	bl	8000580 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    // Generated from the component: PMSM JMAG_sp_outputs.PMSM JMAGsp_outputs
    _pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out = ext_In->_pmsm1_out[0];
 8001a2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a32:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001a36:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    _pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out1 = ext_In->_pmsm1_out[1];
 8001a3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a3e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a42:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    _pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out2 = ext_In->_pmsm1_out[2];
 8001a46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a4a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a4e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
    // Generated from the component: Termination3
    // Generated from the component: Gain27
    _gain27__out = 4.0 * _pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out2;
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4bba      	ldr	r3, [pc, #744]	; (8001d40 <root_step0+0x5f0>)
 8001a58:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001a5c:	f7fe fd90 	bl	8000580 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    // Generated from the component: Gain28
    _gain28__out = 4.0 * _pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out1;
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4bb4      	ldr	r3, [pc, #720]	; (8001d40 <root_step0+0x5f0>)
 8001a6e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001a72:	f7fe fd85 	bl	8000580 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    // Generated from the component: Product2
    _product2__out = (_pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out1 * _pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out);
 8001a7e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001a82:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001a86:	f7fe fd7b 	bl	8000580 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    // Generated from the component: Rate Transition1.Input
    m_States->_rate_transition1_output__state = _pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out1;
 8001a92:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001a96:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001a9a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    // Generated from the component: I_abc_dq1.alpha beta to dq
    _i_abc_dq1_alpha_beta_to_dq__k1 = cos(_gain27__out);
 8001a9e:	ed97 0b4c 	vldr	d0, [r7, #304]	; 0x130
 8001aa2:	f003 fe1d 	bl	80056e0 <cos>
 8001aa6:	ed87 0b46 	vstr	d0, [r7, #280]	; 0x118
    _i_abc_dq1_alpha_beta_to_dq__k2 = sin(_gain27__out);
 8001aaa:	ed97 0b4c 	vldr	d0, [r7, #304]	; 0x130
 8001aae:	f003 fe6b 	bl	8005788 <sin>
 8001ab2:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
    _i_abc_dq1_alpha_beta_to_dq__d = _i_abc_dq1_alpha_beta_to_dq__k2 * _i_abc_dq1_abc_to_alpha_beta__alpha - _i_abc_dq1_alpha_beta_to_dq__k1 * _i_abc_dq1_abc_to_alpha_beta__beta;
 8001ab6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8001aba:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001abe:	f7fe fd5f 	bl	8000580 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001ace:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001ad2:	f7fe fd55 	bl	8000580 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4640      	mov	r0, r8
 8001adc:	4649      	mov	r1, r9
 8001ade:	f7fe fb97 	bl	8000210 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
    _i_abc_dq1_alpha_beta_to_dq__q = _i_abc_dq1_alpha_beta_to_dq__k1 * _i_abc_dq1_abc_to_alpha_beta__alpha + _i_abc_dq1_alpha_beta_to_dq__k2 * _i_abc_dq1_abc_to_alpha_beta__beta;
 8001aea:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8001aee:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001af2:	f7fe fd45 	bl	8000580 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4690      	mov	r8, r2
 8001afc:	4699      	mov	r9, r3
 8001afe:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001b02:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001b06:	f7fe fd3b 	bl	8000580 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4640      	mov	r0, r8
 8001b10:	4649      	mov	r1, r9
 8001b12:	f7fe fb7f 	bl	8000214 <__adddf3>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
    // Generated from the component: Current_regulation.Product1
    _current_regulation_product1__out = (_current_regulation_constant1__out * _gain28__out * _i_abc_dq1_alpha_beta_to_dq__q);
 8001b1e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b22:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8001b26:	f7fe fd2b 	bl	8000580 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001b32:	460e      	mov	r6, r1
 8001b34:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001b38:	f7fe fd22 	bl	8000580 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Current_regulation.Product2
    _current_regulation_product2__out = (_current_regulation_constant2__out * _i_abc_dq1_alpha_beta_to_dq__d);
 8001b44:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b48:	461e      	mov	r6, r3
 8001b4a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001b4e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8001b52:	f7fe fd15 	bl	8000580 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Current_regulation.Sum7
    _current_regulation_sum7__out = _current_command_generator_mtpa__id_ref - _i_abc_dq1_alpha_beta_to_dq__d;
 8001b5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b62:	461e      	mov	r6, r3
 8001b64:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001b68:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8001b6c:	f7fe fb50 	bl	8000210 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Current_regulation.Sum8
    _current_regulation_sum8__out = _current_command_generator_mtpa__iq_ref - _i_abc_dq1_alpha_beta_to_dq__q;
 8001b78:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b7c:	461e      	mov	r6, r3
 8001b7e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001b82:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001b86:	f7fe fb43 	bl	8000210 <__aeabi_dsub>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Current_regulation.Sum9
    _current_regulation_sum9__out = _current_regulation_product2__out + _current_regulation_constant3__out;
 8001b92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b96:	461e      	mov	r6, r3
 8001b98:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8001ba2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001ba6:	f7fe fb35 	bl	8000214 <__adddf3>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Current_regulation.Product4
    _current_regulation_product4__out = (ext_In->_current_regulation_kpid_out * _current_regulation_sum7__out);
 8001bb2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001bb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bba:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001bbe:	460e      	mov	r6, r1
 8001bc0:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bc8:	f7fe fcda 	bl	8000580 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Current_regulation.Product6
    _current_regulation_product6__out = (ext_In->_current_regulation_kiid_out * _current_regulation_sum7__out);
 8001bd4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001be0:	460e      	mov	r6, r1
 8001be2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bea:	f7fe fcc9 	bl	8000580 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Current_regulation.Product7
    _current_regulation_product7__out = (ext_In->_current_regulation_kpiq_out * _current_regulation_sum8__out);
 8001bf6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001bfa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bfe:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001c02:	460e      	mov	r6, r1
 8001c04:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001c08:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001c0c:	f7fe fcb8 	bl	8000580 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Current_regulation.Product8
    _current_regulation_product8__out = (ext_In->_current_regulation_kiiq_out * _current_regulation_sum8__out);
 8001c18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c20:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001c24:	460e      	mov	r6, r1
 8001c26:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001c2a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001c2e:	f7fe fca7 	bl	8000580 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Current_regulation.Product5
    _current_regulation_product5__out = (_current_regulation_sum9__out * _gain28__out);
 8001c3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c3e:	461e      	mov	r6, r3
 8001c40:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c44:	4619      	mov	r1, r3
 8001c46:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c4e:	f7fe fc97 	bl	8000580 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Current_regulation.Sum10
    _current_regulation_sum10__out = _current_regulation_integrator1__out + _current_regulation_product4__out;
 8001c5a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c5e:	461e      	mov	r6, r3
 8001c60:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001c68:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001c6c:	f7fe fad2 	bl	8000214 <__adddf3>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Current_regulation.Sum11
    _current_regulation_sum11__out = _current_regulation_integrator2__out + _current_regulation_product7__out;
 8001c78:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c7c:	461e      	mov	r6, r3
 8001c7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001c86:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001c8a:	f7fe fac3 	bl	8000214 <__adddf3>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Current_regulation.Sum3
    _current_regulation_sum3__out = _current_regulation_sum10__out - _current_regulation_product1__out;
 8001c96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c9a:	461e      	mov	r6, r3
 8001c9c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cae:	f7fe faaf 	bl	8000210 <__aeabi_dsub>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Current_regulation.Sum6
    _current_regulation_sum6__out = _current_regulation_sum11__out + _current_regulation_product5__out;
 8001cba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cbe:	461e      	mov	r6, r3
 8001cc0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001cce:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001cd2:	f7fe fa9f 	bl	8000214 <__adddf3>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Subsystem1.dq to alpha beta1
    _subsystem1_dq_to_alpha_beta1__k1 = cos(_gain27__out);
 8001cde:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ce2:	461e      	mov	r6, r3
 8001ce4:	ed97 0b4c 	vldr	d0, [r7, #304]	; 0x130
 8001ce8:	f003 fcfa 	bl	80056e0 <cos>
 8001cec:	ed86 0b00 	vstr	d0, [r6]
    _subsystem1_dq_to_alpha_beta1__k2 = sin(_gain27__out);
 8001cf0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cf4:	461e      	mov	r6, r3
 8001cf6:	ed97 0b4c 	vldr	d0, [r7, #304]	; 0x130
 8001cfa:	f003 fd45 	bl	8005788 <sin>
 8001cfe:	ed06 0b02 	vstr	d0, [r6, #-8]
    _subsystem1_dq_to_alpha_beta1__alpha = _subsystem1_dq_to_alpha_beta1__k2 * _current_regulation_sum3__out + _subsystem1_dq_to_alpha_beta1__k1 * _current_regulation_sum6__out;
 8001d02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d06:	4619      	mov	r1, r3
 8001d08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001d14:	f7fe fc34 	bl	8000580 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4690      	mov	r8, r2
 8001d1e:	4699      	mov	r9, r3
 8001d20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d24:	4619      	mov	r1, r3
 8001d26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d32:	f7fe fc25 	bl	8000580 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001d3e:	e009      	b.n	8001d54 <root_step0+0x604>
 8001d40:	40100000 	.word	0x40100000
 8001d44:	55555555 	.word	0x55555555
 8001d48:	3fd55555 	.word	0x3fd55555
 8001d4c:	4590331d 	.word	0x4590331d
 8001d50:	3fe279a7 	.word	0x3fe279a7
 8001d54:	460e      	mov	r6, r1
 8001d56:	4640      	mov	r0, r8
 8001d58:	4649      	mov	r1, r9
 8001d5a:	f7fe fa5b 	bl	8000214 <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	e9c6 2300 	strd	r2, r3, [r6]
    _subsystem1_dq_to_alpha_beta1__beta = _subsystem1_dq_to_alpha_beta1__k2 * _current_regulation_sum6__out - _subsystem1_dq_to_alpha_beta1__k1 * _current_regulation_sum3__out;
 8001d66:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001d74:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001d78:	f7fe fc02 	bl	8000580 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4690      	mov	r8, r2
 8001d82:	4699      	mov	r9, r3
 8001d84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d96:	f7fe fbf3 	bl	8000580 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001da2:	460e      	mov	r6, r1
 8001da4:	4640      	mov	r0, r8
 8001da6:	4649      	mov	r1, r9
 8001da8:	f7fe fa32 	bl	8000210 <__aeabi_dsub>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Subsystem1.Gain33
    _subsystem1_gain33__out = 0.004 * _subsystem1_dq_to_alpha_beta1__alpha;
 8001db4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001db8:	461e      	mov	r6, r3
 8001dba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	a3d9      	add	r3, pc, #868	; (adr r3, 8002128 <root_step0+0x9d8>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dca:	f7fe fbd9 	bl	8000580 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Subsystem1.Gain34
    _subsystem1_gain34__out = 0.004 * _subsystem1_dq_to_alpha_beta1__beta;
 8001dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dda:	461e      	mov	r6, r3
 8001ddc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001de0:	4619      	mov	r1, r3
 8001de2:	a3d1      	add	r3, pc, #836	; (adr r3, 8002128 <root_step0+0x9d8>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001dec:	f7fe fbc8 	bl	8000580 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Subsystem1.SVPWM References Generator1.Gain4
    _subsystem1_svpwm_references_generator1_gain4__out = 0.5773502691896258 * _subsystem1_gain33__out;
 8001df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dfc:	461e      	mov	r6, r3
 8001dfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e02:	4619      	mov	r1, r3
 8001e04:	a3ca      	add	r3, pc, #808	; (adr r3, 8002130 <root_step0+0x9e0>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e0e:	f7fe fbb7 	bl	8000580 <__aeabi_dmul>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c6 2300 	strd	r2, r3, [r6]
    // Generated from the component: Subsystem1.SVPWM References Generator1.Gain5
    _subsystem1_svpwm_references_generator1_gain5__out = 0.5773502691896258 * _subsystem1_gain34__out;
 8001e1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e1e:	461e      	mov	r6, r3
 8001e20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e24:	4619      	mov	r1, r3
 8001e26:	a3c2      	add	r3, pc, #776	; (adr r3, 8002130 <root_step0+0x9e0>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001e30:	f7fe fba6 	bl	8000580 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	e946 2302 	strd	r2, r3, [r6, #-8]
    // Generated from the component: Subsystem1.SVPWM References Generator1.SVPWM
    _subsystem1_svpwm_references_generator1_svpwm__alpha = _subsystem1_svpwm_references_generator1_gain4__out;
 8001e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e40:	4619      	mov	r1, r3
 8001e42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	e9c1 2300 	strd	r2, r3, [r1]
    _subsystem1_svpwm_references_generator1_svpwm__beta = _subsystem1_svpwm_references_generator1_gain5__out;
 8001e4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e52:	4619      	mov	r1, r3
 8001e54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001e5c:	e941 2302 	strd	r2, r3, [r1, #-8]
    {
        if ( _subsystem1_svpwm_references_generator1_svpwm__beta >= 0.0 )     {
 8001e60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001e72:	f7fe fe0b 	bl	8000a8c <__aeabi_dcmpge>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d03c      	beq.n	8001ef6 <root_step0+0x7a6>
            if ( 1 / sqrt ( 3 ) * _subsystem1_svpwm_references_generator1_svpwm__beta > fabs ( _subsystem1_svpwm_references_generator1_svpwm__alpha ) ) m_States->_subsystem1_svpwm_references_generator1_svpwm__sector = 2 ;
 8001e7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e80:	4619      	mov	r1, r3
 8001e82:	a3ab      	add	r3, pc, #684	; (adr r3, 8002130 <root_step0+0x9e0>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001e8c:	f7fe fb78 	bl	8000580 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	603a      	str	r2, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eac:	f7fe fdf8 	bl	8000aa0 <__aeabi_dcmpgt>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <root_step0+0x772>
 8001eb6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ec0:	e053      	b.n	8001f6a <root_step0+0x81a>
            else if ( _subsystem1_svpwm_references_generator1_svpwm__alpha >= 0.0 ) m_States->_subsystem1_svpwm_references_generator1_svpwm__sector = 1 ;
 8001ec2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ed4:	f7fe fdda 	bl	8000a8c <__aeabi_dcmpge>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <root_step0+0x79a>
 8001ede:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ee8:	e03f      	b.n	8001f6a <root_step0+0x81a>
            else m_States->_subsystem1_svpwm_references_generator1_svpwm__sector = 3 ;
 8001eea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001eee:	2203      	movs	r2, #3
 8001ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ef4:	e039      	b.n	8001f6a <root_step0+0x81a>
        }
        else     {
            if ( - 1 / sqrt ( 3 ) * _subsystem1_svpwm_references_generator1_svpwm__beta > fabs ( _subsystem1_svpwm_references_generator1_svpwm__alpha ) ) m_States->_subsystem1_svpwm_references_generator1_svpwm__sector = 5 ;
 8001ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001efa:	4619      	mov	r1, r3
 8001efc:	a38e      	add	r3, pc, #568	; (adr r3, 8002138 <root_step0+0x9e8>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001f06:	f7fe fb3b 	bl	8000580 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f16:	681c      	ldr	r4, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001f1e:	4622      	mov	r2, r4
 8001f20:	462b      	mov	r3, r5
 8001f22:	f7fe fdbd 	bl	8000aa0 <__aeabi_dcmpgt>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <root_step0+0x7e8>
 8001f2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f30:	2205      	movs	r2, #5
 8001f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001f36:	e018      	b.n	8001f6a <root_step0+0x81a>
            else if ( _subsystem1_svpwm_references_generator1_svpwm__alpha >= 0.0 ) m_States->_subsystem1_svpwm_references_generator1_svpwm__sector = 6 ;
 8001f38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f4a:	f7fe fd9f 	bl	8000a8c <__aeabi_dcmpge>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <root_step0+0x810>
 8001f54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f58:	2206      	movs	r2, #6
 8001f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001f5e:	e004      	b.n	8001f6a <root_step0+0x81a>
            else m_States->_subsystem1_svpwm_references_generator1_svpwm__sector = 4 ;
 8001f60:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f64:	2204      	movs	r2, #4
 8001f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
        switch ( m_States->_subsystem1_svpwm_references_generator1_svpwm__sector )     {
 8001f6a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f72:	3b01      	subs	r3, #1
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	f200 80e3 	bhi.w	8002140 <root_step0+0x9f0>
 8001f7a:	a201      	add	r2, pc, #4	; (adr r2, 8001f80 <root_step0+0x830>)
 8001f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f80:	08001f99 	.word	0x08001f99
 8001f84:	08001fd5 	.word	0x08001fd5
 8001f88:	0800200f 	.word	0x0800200f
 8001f8c:	0800204b 	.word	0x0800204b
 8001f90:	08002087 	.word	0x08002087
 8001f94:	080020c1 	.word	0x080020c1
        case 1 :
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk = 1.5 ;
 8001f98:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <root_step0+0x9d0>)
 8001fa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next = 0.0 ;
 8001fa6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck = - 0.866 ;
 8001fb6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001fba:	a351      	add	r3, pc, #324	; (adr r3, 8002100 <root_step0+0x9b0>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next = 1.732 ;
 8001fc4:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001fc8:	a34f      	add	r3, pc, #316	; (adr r3, 8002108 <root_step0+0x9b8>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            break;
 8001fd2:	e0d5      	b.n	8002180 <root_step0+0xa30>
        case 2 :
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk = 1.5 ;
 8001fd4:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	4b50      	ldr	r3, [pc, #320]	; (8002120 <root_step0+0x9d0>)
 8001fde:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next = - 1.5 ;
 8001fe2:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <root_step0+0x9d4>)
 8001fec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck = 0.866 ;
 8001ff0:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001ff4:	a346      	add	r3, pc, #280	; (adr r3, 8002110 <root_step0+0x9c0>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next = 0.866 ;
 8001ffe:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002002:	a343      	add	r3, pc, #268	; (adr r3, 8002110 <root_step0+0x9c0>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            break;
 800200c:	e0b8      	b.n	8002180 <root_step0+0xa30>
        case 3 :
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk = 0.0 ;
 800200e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next = - 1.5 ;
 800201e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <root_step0+0x9d4>)
 8002028:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck = 1.732 ;
 800202c:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002030:	a335      	add	r3, pc, #212	; (adr r3, 8002108 <root_step0+0x9b8>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next = - 0.866 ;
 800203a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800203e:	a330      	add	r3, pc, #192	; (adr r3, 8002100 <root_step0+0x9b0>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            break;
 8002048:	e09a      	b.n	8002180 <root_step0+0xa30>
        case 4 :
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk = - 1.5 ;
 800204a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <root_step0+0x9d4>)
 8002054:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next = 0.0 ;
 8002058:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck = 0.866 ;
 8002068:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800206c:	a328      	add	r3, pc, #160	; (adr r3, 8002110 <root_step0+0x9c0>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next = - 1.732 ;
 8002076:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800207a:	a327      	add	r3, pc, #156	; (adr r3, 8002118 <root_step0+0x9c8>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            break;
 8002084:	e07c      	b.n	8002180 <root_step0+0xa30>
        case 5 :
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk = - 1.5 ;
 8002086:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <root_step0+0x9d4>)
 8002090:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next = 1.5 ;
 8002094:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <root_step0+0x9d0>)
 800209e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck = - 0.866 ;
 80020a2:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80020a6:	a316      	add	r3, pc, #88	; (adr r3, 8002100 <root_step0+0x9b0>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next = - 0.866 ;
 80020b0:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80020b4:	a312      	add	r3, pc, #72	; (adr r3, 8002100 <root_step0+0x9b0>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            break;
 80020be:	e05f      	b.n	8002180 <root_step0+0xa30>
        case 6 :
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk = 0.0 ;
 80020c0:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next = 1.5 ;
 80020d0:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <root_step0+0x9d0>)
 80020da:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck = - 1.732 ;
 80020de:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80020e2:	a30d      	add	r3, pc, #52	; (adr r3, 8002118 <root_step0+0x9c8>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next = 0.866 ;
 80020ec:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80020f0:	a307      	add	r3, pc, #28	; (adr r3, 8002110 <root_step0+0x9c0>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            break;
 80020fa:	e041      	b.n	8002180 <root_step0+0xa30>
 80020fc:	f3af 8000 	nop.w
 8002100:	a1cac083 	.word	0xa1cac083
 8002104:	bfebb645 	.word	0xbfebb645
 8002108:	a1cac083 	.word	0xa1cac083
 800210c:	3ffbb645 	.word	0x3ffbb645
 8002110:	a1cac083 	.word	0xa1cac083
 8002114:	3febb645 	.word	0x3febb645
 8002118:	a1cac083 	.word	0xa1cac083
 800211c:	bffbb645 	.word	0xbffbb645
 8002120:	3ff80000 	.word	0x3ff80000
 8002124:	bff80000 	.word	0xbff80000
 8002128:	d2f1a9fc 	.word	0xd2f1a9fc
 800212c:	3f70624d 	.word	0x3f70624d
 8002130:	4590331d 	.word	0x4590331d
 8002134:	3fe279a7 	.word	0x3fe279a7
 8002138:	4590331d 	.word	0x4590331d
 800213c:	bfe279a7 	.word	0xbfe279a7
        default :
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk = 0.0 ;
 8002140:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next = 0.0 ;
 8002150:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck = 0.0 ;
 8002160:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next = 0.0 ;
 8002170:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        }
        m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk = 10000.0 * ( m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk * _subsystem1_svpwm_references_generator1_svpwm__alpha + m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck * _subsystem1_svpwm_references_generator1_svpwm__beta ) ;
 8002180:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002184:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002188:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f9f6 	bl	8000580 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4614      	mov	r4, r2
 800219a:	461d      	mov	r5, r3
 800219c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80021a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80021ac:	f7fe f9e8 	bl	8000580 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4620      	mov	r0, r4
 80021b6:	4629      	mov	r1, r5
 80021b8:	f7fe f82c 	bl	8000214 <__adddf3>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f20f 53d8 	addw	r3, pc, #1496	; 0x5d8
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	f7fe f9d8 	bl	8000580 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80021d8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
        m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next = 10000.0 * ( m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next * _subsystem1_svpwm_references_generator1_svpwm__alpha + m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next * _subsystem1_svpwm_references_generator1_svpwm__beta ) ;
 80021dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021e0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80021e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe f9c8 	bl	8000580 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	461d      	mov	r5, r3
 80021f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021fc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002200:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002204:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002208:	f7fe f9ba 	bl	8000580 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	f7fd fffe 	bl	8000214 <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f20f 537c 	addw	r3, pc, #1404	; 0x57c
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f7fe f9aa 	bl	8000580 <__aeabi_dmul>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002234:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        m_States->_subsystem1_svpwm_references_generator1_svpwm__T0 = 10000.0 - m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk - m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next ;
 8002238:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800223c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002240:	f20f 515c 	addw	r1, pc, #1372	; 0x55c
 8002244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002248:	f7fd ffe2 	bl	8000210 <__aeabi_dsub>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002258:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800225c:	f7fd ffd8 	bl	8000210 <__aeabi_dsub>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002268:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
        if ( ! ( m_States->_subsystem1_svpwm_references_generator1_svpwm__sector & 0x0001  ) )     {
 800226c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d117      	bne.n	80022ac <root_step0+0xb5c>
            m_States->_subsystem1_svpwm_references_generator1_svpwm__tmp = m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk ;
 800227c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002280:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002284:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002288:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk = m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next ;
 800228c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002290:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002294:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002298:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next = m_States->_subsystem1_svpwm_references_generator1_svpwm__tmp ;
 800229c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022a0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80022a4:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80022a8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        }
        if ( m_States->_subsystem1_svpwm_references_generator1_svpwm__T0 < 0.0 )     {
 80022ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022b0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	f7fe fbd2 	bl	8000a64 <__aeabi_dcmplt>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d04f      	beq.n	8002366 <root_step0+0xc16>
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk = 10000.0 * m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk / ( m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk + m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next ) ;
 80022c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022ca:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80022ce:	f20f 43d0 	addw	r3, pc, #1232	; 0x4d0
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	f7fe f953 	bl	8000580 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4614      	mov	r4, r2
 80022e0:	461d      	mov	r5, r3
 80022e2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022e6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80022ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80022f2:	f7fd ff8f 	bl	8000214 <__adddf3>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fe fa69 	bl	80007d4 <__aeabi_ddiv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800230a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
            m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next = 10000.0 * m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next / ( m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk + m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next ) ;
 800230e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002312:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002316:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fe f92f 	bl	8000580 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4614      	mov	r4, r2
 8002328:	461d      	mov	r5, r3
 800232a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800232e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002332:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002336:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800233a:	f7fd ff6b 	bl	8000214 <__adddf3>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4620      	mov	r0, r4
 8002344:	4629      	mov	r1, r5
 8002346:	f7fe fa45 	bl	80007d4 <__aeabi_ddiv>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002352:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
            m_States->_subsystem1_svpwm_references_generator1_svpwm__T0 = 0.0 ;
 8002356:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
        }
        m_States->_subsystem1_svpwm_references_generator1_svpwm___long = ( m_States->_subsystem1_svpwm_references_generator1_svpwm__T0 / 2 + m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk + m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next ) / 10000.0 ;
 8002366:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800236a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002376:	f7fe fa2d 	bl	80007d4 <__aeabi_ddiv>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002386:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800238a:	f7fd ff43 	bl	8000214 <__adddf3>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800239a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800239e:	f7fd ff39 	bl	8000214 <__adddf3>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	a3fd      	add	r3, pc, #1012	; (adr r3, 80027a0 <root_step0+0x1050>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe fa10 	bl	80007d4 <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80023bc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
        m_States->_subsystem1_svpwm_references_generator1_svpwm__middle = ( m_States->_subsystem1_svpwm_references_generator1_svpwm__T0 / 2 + m_States->_subsystem1_svpwm_references_generator1_svpwm__Tk_next ) / 10000.0 ;
 80023c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023c4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023d0:	f7fe fa00 	bl	80007d4 <__aeabi_ddiv>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023e0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023e4:	f7fd ff16 	bl	8000214 <__adddf3>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	a3eb      	add	r3, pc, #940	; (adr r3, 80027a0 <root_step0+0x1050>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f9ed 	bl	80007d4 <__aeabi_ddiv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002402:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        m_States->_subsystem1_svpwm_references_generator1_svpwm___short = ( m_States->_subsystem1_svpwm_references_generator1_svpwm__T0 / 2 ) / 10000.0 ;
 8002406:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800240a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002416:	f7fe f9dd 	bl	80007d4 <__aeabi_ddiv>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	a3df      	add	r3, pc, #892	; (adr r3, 80027a0 <root_step0+0x1050>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f9d4 	bl	80007d4 <__aeabi_ddiv>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002434:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        switch ( m_States->_subsystem1_svpwm_references_generator1_svpwm__sector )     {
 8002438:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800243c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002440:	3b01      	subs	r3, #1
 8002442:	2b05      	cmp	r3, #5
 8002444:	f200 8082 	bhi.w	800254c <root_step0+0xdfc>
 8002448:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <root_step0+0xd00>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	08002469 	.word	0x08002469
 8002454:	0800248f 	.word	0x0800248f
 8002458:	080024b5 	.word	0x080024b5
 800245c:	080024db 	.word	0x080024db
 8002460:	08002501 	.word	0x08002501
 8002464:	08002527 	.word	0x08002527
        case 1 :
            _subsystem1_svpwm_references_generator1_svpwm__ref1 = m_States->_subsystem1_svpwm_references_generator1_svpwm___long ;
 8002468:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800246c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002470:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
            _subsystem1_svpwm_references_generator1_svpwm__ref2 = m_States->_subsystem1_svpwm_references_generator1_svpwm__middle ;
 8002474:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002478:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800247c:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
            _subsystem1_svpwm_references_generator1_svpwm__ref3 = m_States->_subsystem1_svpwm_references_generator1_svpwm___short ;
 8002480:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002484:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002488:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
            break;
 800248c:	e070      	b.n	8002570 <root_step0+0xe20>
        case 2 :
            _subsystem1_svpwm_references_generator1_svpwm__ref1 = m_States->_subsystem1_svpwm_references_generator1_svpwm__middle ;
 800248e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002492:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002496:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
            _subsystem1_svpwm_references_generator1_svpwm__ref2 = m_States->_subsystem1_svpwm_references_generator1_svpwm___long ;
 800249a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800249e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80024a2:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
            _subsystem1_svpwm_references_generator1_svpwm__ref3 = m_States->_subsystem1_svpwm_references_generator1_svpwm___short ;
 80024a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024aa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80024ae:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
            break;
 80024b2:	e05d      	b.n	8002570 <root_step0+0xe20>
        case 3 :
            _subsystem1_svpwm_references_generator1_svpwm__ref1 = m_States->_subsystem1_svpwm_references_generator1_svpwm___short ;
 80024b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024b8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80024bc:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
            _subsystem1_svpwm_references_generator1_svpwm__ref2 = m_States->_subsystem1_svpwm_references_generator1_svpwm___long ;
 80024c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024c4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80024c8:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
            _subsystem1_svpwm_references_generator1_svpwm__ref3 = m_States->_subsystem1_svpwm_references_generator1_svpwm__middle ;
 80024cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024d0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80024d4:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
            break;
 80024d8:	e04a      	b.n	8002570 <root_step0+0xe20>
        case 4 :
            _subsystem1_svpwm_references_generator1_svpwm__ref1 = m_States->_subsystem1_svpwm_references_generator1_svpwm___short ;
 80024da:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024de:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80024e2:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
            _subsystem1_svpwm_references_generator1_svpwm__ref2 = m_States->_subsystem1_svpwm_references_generator1_svpwm__middle ;
 80024e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024ea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80024ee:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
            _subsystem1_svpwm_references_generator1_svpwm__ref3 = m_States->_subsystem1_svpwm_references_generator1_svpwm___long ;
 80024f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024f6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80024fa:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
            break;
 80024fe:	e037      	b.n	8002570 <root_step0+0xe20>
        case 5 :
            _subsystem1_svpwm_references_generator1_svpwm__ref1 = m_States->_subsystem1_svpwm_references_generator1_svpwm__middle ;
 8002500:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002504:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002508:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
            _subsystem1_svpwm_references_generator1_svpwm__ref2 = m_States->_subsystem1_svpwm_references_generator1_svpwm___short ;
 800250c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002510:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002514:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
            _subsystem1_svpwm_references_generator1_svpwm__ref3 = m_States->_subsystem1_svpwm_references_generator1_svpwm___long ;
 8002518:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800251c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002520:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
            break;
 8002524:	e024      	b.n	8002570 <root_step0+0xe20>
        case 6 :
            _subsystem1_svpwm_references_generator1_svpwm__ref1 = m_States->_subsystem1_svpwm_references_generator1_svpwm___long ;
 8002526:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800252a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800252e:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
            _subsystem1_svpwm_references_generator1_svpwm__ref2 = m_States->_subsystem1_svpwm_references_generator1_svpwm___short ;
 8002532:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002536:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800253a:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
            _subsystem1_svpwm_references_generator1_svpwm__ref3 = m_States->_subsystem1_svpwm_references_generator1_svpwm__middle ;
 800253e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002542:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002546:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
            break;
 800254a:	e011      	b.n	8002570 <root_step0+0xe20>
        default :
            _subsystem1_svpwm_references_generator1_svpwm__ref1 = 0.0 ;
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
            _subsystem1_svpwm_references_generator1_svpwm__ref2 = 0.0 ;
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
            _subsystem1_svpwm_references_generator1_svpwm__ref3 = 0.0 ;
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }
    }
    // Generated from the component: Subsystem1.SVPWM References Generator1.Sum1
    _subsystem1_svpwm_references_generator1_sum1__out = _subsystem1_svpwm_references_generator1_svpwm__ref1 - _subsystem1_svpwm_references_generator1_constant1__out;
 8002570:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002574:	461c      	mov	r4, r3
 8002576:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800257a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800257e:	f7fd fe47 	bl	8000210 <__aeabi_dsub>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	e9c4 2300 	strd	r2, r3, [r4]
    // Generated from the component: Subsystem1.SVPWM References Generator1.Sum2
    _subsystem1_svpwm_references_generator1_sum2__out = _subsystem1_svpwm_references_generator1_svpwm__ref2 - _subsystem1_svpwm_references_generator1_constant2__out;
 800258a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800258e:	461c      	mov	r4, r3
 8002590:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002594:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8002598:	f7fd fe3a 	bl	8000210 <__aeabi_dsub>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	e944 2302 	strd	r2, r3, [r4, #-8]
    // Generated from the component: Subsystem1.SVPWM References Generator1.Sum3
    _subsystem1_svpwm_references_generator1_sum3__out = _subsystem1_svpwm_references_generator1_svpwm__ref3 - _subsystem1_svpwm_references_generator1_constant3__out;
 80025a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a8:	461c      	mov	r4, r3
 80025aa:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80025ae:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80025b2:	f7fd fe2d 	bl	8000210 <__aeabi_dsub>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	e9c4 2300 	strd	r2, r3, [r4]
    // Generated from the component: Subsystem1.SVPWM References Generator1.Gain6
    _subsystem1_svpwm_references_generator1_gain6__out = 2.0 * _subsystem1_svpwm_references_generator1_sum1__out;
 80025be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c2:	461c      	mov	r4, r3
 80025c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	f7fd fe20 	bl	8000214 <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	e944 2302 	strd	r2, r3, [r4, #-8]
    // Generated from the component: Subsystem1.SVPWM References Generator1.Gain7
    _subsystem1_svpwm_references_generator1_gain7__out = 2.0 * _subsystem1_svpwm_references_generator1_sum2__out;
 80025dc:	f107 0318 	add.w	r3, r7, #24
 80025e0:	461c      	mov	r4, r3
 80025e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	f7fd fe11 	bl	8000214 <__adddf3>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	e9c4 2300 	strd	r2, r3, [r4]
    // Generated from the component: Subsystem1.SVPWM References Generator1.Gain8
    _subsystem1_svpwm_references_generator1_gain8__out = 2.0 * _subsystem1_svpwm_references_generator1_sum3__out;
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	461c      	mov	r4, r3
 8002600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	f7fd fe02 	bl	8000214 <__adddf3>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	e944 2302 	strd	r2, r3, [r4, #-8]
    ///////////////
    // Update sinks
    ///////////////
    m_Sinks->_current_regulation_iderror_in = _current_regulation_sum7__out;
 8002618:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800261c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	e9c1 2300 	strd	r2, r3, [r1]
    m_Sinks->_current_regulation_iqerror_in = _current_regulation_sum8__out;
 8002628:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800262c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002634:	e9c1 2302 	strd	r2, r3, [r1, #8]
    m_Sinks->_current_regulation_vdref_in = _current_regulation_sum3__out;
 8002638:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800263c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	e9c1 2304 	strd	r2, r3, [r1, #16]
    m_Sinks->_current_regulation_vqref_in = _current_regulation_sum6__out;
 8002648:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800264c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002650:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002654:	e9c1 2306 	strd	r2, r3, [r1, #24]
    m_Sinks->_id_in = _i_abc_dq1_alpha_beta_to_dq__d;
 8002658:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800265c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8002660:	e9c1 2308 	strd	r2, r3, [r1, #32]
    m_Sinks->_idref_in = _current_command_generator_mtpa__id_ref;
 8002664:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8002668:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800266c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    m_Sinks->_iq_in = _i_abc_dq1_alpha_beta_to_dq__q;
 8002670:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8002674:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002678:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    m_Sinks->_iqref_in = _current_command_generator_mtpa__iq_ref;
 800267c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8002680:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8002684:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    m_Sinks->_pmeh_in = _product2__out;
 8002688:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800268c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002690:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    m_Sinks->_pmsm1_load_in = ext_In->_load_torque_out;
 8002694:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002698:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800269c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80026a0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    m_Sinks->_theta_in = _gain27__out;
 80026a4:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80026a8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80026ac:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    m_Sinks->_three_phase_inverter1_en = _constant1__out;
 80026b0:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80026b4:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 80026b8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    m_Sinks->_three_phase_inverter1_ina = _subsystem1_svpwm_references_generator1_gain6__out;
 80026bc:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80026c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80026c8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    m_Sinks->_three_phase_inverter1_inb = _subsystem1_svpwm_references_generator1_gain7__out;
 80026cc:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80026d0:	f107 0318 	add.w	r3, r7, #24
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    m_Sinks->_three_phase_inverter1_inc = _subsystem1_svpwm_references_generator1_gain8__out;
 80026dc:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80026e0:	f107 0318 	add.w	r3, r7, #24
 80026e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80026e8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    m_Sinks->_va_in = _subsystem1_svpwm_references_generator1_gain6__out;
 80026ec:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80026f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80026f8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    m_Sinks->_vb_in = _subsystem1_svpwm_references_generator1_gain7__out;
 80026fc:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8002700:	f107 0318 	add.w	r3, r7, #24
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    m_Sinks->_vc_in = _subsystem1_svpwm_references_generator1_gain8__out;
 800270c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8002710:	f107 0318 	add.w	r3, r7, #24
 8002714:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002718:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    m_Sinks->_w_in = _pmsm_jmag_sp_outputs_pmsm_jmagsp_outputs__out1;
 800271c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8002720:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002724:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    //////////////////////////////////////////////////////////////////////////
    // Update block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.update.block.start
    // Generated from the component: Current_regulation.Integrator1
    m_States->_current_regulation_integrator1__state += _current_regulation_product6__out * 0.0001;
 8002728:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800272c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002730:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002734:	4619      	mov	r1, r3
 8002736:	a31c      	add	r3, pc, #112	; (adr r3, 80027a8 <root_step0+0x1058>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002740:	f7fd ff1e 	bl	8000580 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fd fd62 	bl	8000214 <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002758:	e9c1 2300 	strd	r2, r3, [r1]
    // Generated from the component: Current_regulation.Integrator2
    m_States->_current_regulation_integrator2__state += _current_regulation_product8__out * 0.0001;
 800275c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002760:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002764:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002768:	4619      	mov	r1, r3
 800276a:	a30f      	add	r3, pc, #60	; (adr r3, 80027a8 <root_step0+0x1058>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002774:	f7fd ff04 	bl	8000580 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4620      	mov	r0, r4
 800277e:	4629      	mov	r1, r5
 8002780:	f7fd fd48 	bl	8000214 <__adddf3>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800278c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    // Generated from the component: current_command_generator.MTPA
    // Generated from the component: Subsystem1.SVPWM References Generator1.SVPWM
    //@cmp.update.block.end
}
 8002790:	bf00      	nop
 8002792:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8002796:	46bd      	mov	sp, r7
 8002798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800279c:	f3af 8000 	nop.w
 80027a0:	00000000 	.word	0x00000000
 80027a4:	40c38800 	.word	0x40c38800
 80027a8:	eb1c432d 	.word	0xeb1c432d
 80027ac:	3f1a36e2 	.word	0x3f1a36e2

080027b0 <root_init0>:

void root_init0(root_ModelData *p_m_Data) {
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    ///////////////////////
    // Initialize variables
    ///////////////////////
    root_ExtIn *ext_In = (root_ExtIn *) p_m_Data->p_extIn;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
    root_ModelStates *m_States = (root_ModelStates *) p_m_Data->p_States;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	60bb      	str	r3, [r7, #8]
    // Generated from the component: Current_regulation.Kiid.out
    ext_In->_current_regulation_kiid_out = 75.39822368615503;
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	a349      	add	r3, pc, #292	; (adr r3, 80028ec <root_init0+0x13c>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	e9c1 2300 	strd	r2, r3, [r1]
    // Generated from the component: Current_regulation.Kiiq.out
    ext_In->_current_regulation_kiiq_out = 75.39822368615503;
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	a346      	add	r3, pc, #280	; (adr r3, 80028ec <root_init0+0x13c>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    // Generated from the component: Current_regulation.Kpid.out
    ext_In->_current_regulation_kpid_out = 0.6283185307179586;
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	a345      	add	r3, pc, #276	; (adr r3, 80028f4 <root_init0+0x144>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    // Generated from the component: Current_regulation.Kpiq.out
    ext_In->_current_regulation_kpiq_out = 1.3823007675795091;
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	a344      	add	r3, pc, #272	; (adr r3, 80028fc <root_init0+0x14c>)
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    // Generated from the component: load_torque.out
    ext_In->_load_torque_out = 14.0;
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <root_init0+0x138>)
 80027fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    // Generated from the component: speed_regulation.Kiw.out
    ext_In->_speed_regulation_kiw_out = 584.8654459904805;
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	a331      	add	r3, pc, #196	; (adr r3, 80028c8 <root_init0+0x118>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    // Generated from the component: speed_regulation.Kpw.out
    ext_In->_speed_regulation_kpw_out = 23.271056693257727;
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	a330      	add	r3, pc, #192	; (adr r3, 80028d0 <root_init0+0x120>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    // Generated from the component: speed_regulation.Ksa.out
    ext_In->_speed_regulation_ksa_out = 0.042971834634811745;
 8002818:	68f9      	ldr	r1, [r7, #12]
 800281a:	a32f      	add	r3, pc, #188	; (adr r3, 80028d8 <root_init0+0x128>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    // Generated from the component: w_ref.out
    ext_In->_w_ref_out = 150.0;
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	a32e      	add	r3, pc, #184	; (adr r3, 80028e0 <root_init0+0x130>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    // Init tunable properties if they exist
    //@cmp.init.block.start
    m_States->_current_regulation_integrator1__state = 0.0;
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	e9c1 2300 	strd	r2, r3, [r1]
    m_States->_current_regulation_integrator2__state = 0.0;
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9c1 2302 	strd	r2, r3, [r1, #8]
    m_States->_rate_transition2_output__state =  0.0;
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9c1 2306 	strd	r2, r3, [r1, #24]
    m_States->_rate_transition1_output__state =  0.0;
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9c1 2304 	strd	r2, r3, [r1, #16]
    m_States->_speed_regulation_integrator1__state = 0.0;
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
        m_States->_subsystem1_svpwm_references_generator1_svpwm__sector = 0 ;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk = 0.0 ;
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        m_States->_subsystem1_svpwm_references_generator1_svpwm__Sk_next = 0.0 ;
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck = 0.0 ;
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        m_States->_subsystem1_svpwm_references_generator1_svpwm__Ck_next = 0.0 ;
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    }
    //@cmp.init.block.end
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	f3af 8000 	nop.w
 80028c8:	6ef28c8b 	.word	0x6ef28c8b
 80028cc:	408246ec 	.word	0x408246ec
 80028d0:	f8b0e762 	.word	0xf8b0e762
 80028d4:	40374563 	.word	0x40374563
 80028d8:	80cfaf98 	.word	0x80cfaf98
 80028dc:	3fa60067 	.word	0x3fa60067
 80028e0:	00000000 	.word	0x00000000
 80028e4:	4062c000 	.word	0x4062c000
 80028e8:	402c0000 	.word	0x402c0000
 80028ec:	7f3321d2 	.word	0x7f3321d2
 80028f0:	4052d97c 	.word	0x4052d97c
 80028f4:	769cf0e0 	.word	0x769cf0e0
 80028f8:	3fe41b2f 	.word	0x3fe41b2f
 80028fc:	68dfd5c4 	.word	0x68dfd5c4
 8002900:	3ff61de7 	.word	0x3ff61de7
 8002904:	00000000 	.word	0x00000000

08002908 <root_step1>:

void root_step1(root_ModelData *p_m_Data) {
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b09a      	sub	sp, #104	; 0x68
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    root_ExtIn *ext_In = (root_ExtIn *) p_m_Data->p_extIn;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	667b      	str	r3, [r7, #100]	; 0x64
    root_ExtOut *ext_Out = (root_ExtOut *) p_m_Data->p_extOut;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	663b      	str	r3, [r7, #96]	; 0x60
    root_ModelSinks *m_Sinks = (root_ModelSinks *) p_m_Data->p_Sinks;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	65fb      	str	r3, [r7, #92]	; 0x5c
    root_ModelStates *m_States = (root_ModelStates *) p_m_Data->p_States;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	65bb      	str	r3, [r7, #88]	; 0x58
    //////////////////////////////////////////////////////////////////////////
    // Output block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.out.block.start
    // Generated from the component: Rate Transition1.Output
    _rate_transition1_output__out = ext_In->_pmsm1_out[1];
 8002928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800292a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800292e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    // Generated from the component: speed_regulation.Integrator1
    _speed_regulation_integrator1__out = m_States->_speed_regulation_integrator1__state;
 8002932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002938:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    // Generated from the component: speed_regulation.Sum7
    _speed_regulation_sum7__out = ext_In->_w_ref_out - _rate_transition1_output__out;
 800293c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800293e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002942:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002946:	f7fd fc63 	bl	8000210 <__aeabi_dsub>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    // Generated from the component: speed_regulation.Product6
    _speed_regulation_product6__out = (ext_In->_speed_regulation_kiw_out * _speed_regulation_integrator1__out);
 8002952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002954:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002958:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800295c:	f7fd fe10 	bl	8000580 <__aeabi_dmul>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    // Generated from the component: speed_regulation.Product4
    _speed_regulation_product4__out = (ext_In->_speed_regulation_kpw_out * _speed_regulation_sum7__out);
 8002968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800296a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800296e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002972:	f7fd fe05 	bl	8000580 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    // Generated from the component: speed_regulation.Sum10
    _speed_regulation_sum10__out = _speed_regulation_product6__out + _speed_regulation_product4__out;
 800297e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002982:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002986:	f7fd fc45 	bl	8000214 <__adddf3>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    // Generated from the component: speed_regulation.Limit1
    _speed_regulation_limit1__out = MIN(MAX(_speed_regulation_sum10__out, -400.0), 400.0);
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <root_step1+0x178>)
 8002998:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800299c:	f7fe f880 	bl	8000aa0 <__aeabi_dcmpgt>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00f      	beq.n	80029c6 <root_step1+0xbe>
 80029a6:	2301      	movs	r3, #1
 80029a8:	461c      	mov	r4, r3
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <root_step1+0x17c>)
 80029b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029b4:	f7fe f856 	bl	8000a64 <__aeabi_dcmplt>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <root_step1+0xba>
 80029be:	2300      	movs	r3, #0
 80029c0:	461c      	mov	r4, r3
 80029c2:	b2e3      	uxtb	r3, r4
 80029c4:	e000      	b.n	80029c8 <root_step1+0xc0>
 80029c6:	2301      	movs	r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d010      	beq.n	80029ee <root_step1+0xe6>
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <root_step1+0x178>)
 80029d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029d6:	f7fe f863 	bl	8000aa0 <__aeabi_dcmpgt>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <root_step1+0xde>
 80029e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029e4:	e006      	b.n	80029f4 <root_step1+0xec>
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <root_step1+0x178>)
 80029ec:	e002      	b.n	80029f4 <root_step1+0xec>
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <root_step1+0x17c>)
 80029f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // Generated from the component: Rate Transition2.Input
    m_States->_rate_transition2_output__state = _speed_regulation_limit1__out;
 80029f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029fe:	e9c1 2306 	strd	r2, r3, [r1, #24]
    // Generated from the component: speed_regulation.Sum11
    _speed_regulation_sum11__out = _speed_regulation_sum10__out - _speed_regulation_limit1__out;
 8002a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a0a:	f7fd fc01 	bl	8000210 <__aeabi_dsub>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // Generated from the component: speed_regulation.Product7
    _speed_regulation_product7__out = (_speed_regulation_sum11__out * ext_In->_speed_regulation_ksa_out);
 8002a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a18:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a20:	f7fd fdae 	bl	8000580 <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // Generated from the component: speed_regulation.Sum12
    _speed_regulation_sum12__out = _speed_regulation_sum7__out - _speed_regulation_product7__out;
 8002a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a34:	f7fd fbec 	bl	8000210 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    //////////////////////////////////////////////////////////////////////////
    // Update block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.update.block.start
    // Generated from the component: speed_regulation.Integrator1
    m_States->_speed_regulation_integrator1__state += _speed_regulation_sum12__out * 0.002;
 8002a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a42:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002a46:	a30c      	add	r3, pc, #48	; (adr r3, 8002a78 <root_step1+0x170>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a50:	f7fd fd96 	bl	8000580 <__aeabi_dmul>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fd fbda 	bl	8000214 <__adddf3>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a66:	e9c1 2308 	strd	r2, r3, [r1, #32]
    //@cmp.update.block.end
}
 8002a6a:	bf00      	nop
 8002a6c:	3768      	adds	r7, #104	; 0x68
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdb0      	pop	{r4, r5, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	f3af 8000 	nop.w
 8002a78:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a7c:	3f60624d 	.word	0x3f60624d
 8002a80:	c0790000 	.word	0xc0790000
 8002a84:	40790000 	.word	0x40790000

08002a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ac6:	2007      	movs	r0, #7
 8002ac8:	f000 fe7e 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_ADC_MspInit+0xb0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d141      	bne.n	8002b7e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8002b4e:	2352      	movs	r3, #82	; 0x52
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b52:	2303      	movs	r3, #3
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480b      	ldr	r0, [pc, #44]	; (8002b90 <HAL_ADC_MspInit+0xb8>)
 8002b62:	f000 fe65 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b66:	2302      	movs	r3, #2
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	4619      	mov	r1, r3
 8002b78:	4806      	ldr	r0, [pc, #24]	; (8002b94 <HAL_ADC_MspInit+0xbc>)
 8002b7a:	f000 fe59 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	; 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40012000 	.word	0x40012000
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400

08002b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <HAL_TIM_Base_MspInit+0x3c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10d      	bne.n	8002bc6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_TIM_Base_MspInit+0x40>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_TIM_Base_MspInit+0x40>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_TIM_Base_MspInit+0x40>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40023800 	.word	0x40023800

08002bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_TIM_MspPostInit+0xa8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d13d      	bne.n	8002c7a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_TIM_MspPostInit+0xac>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <HAL_TIM_MspPostInit+0xac>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_TIM_MspPostInit+0xac>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_TIM_MspPostInit+0xac>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <HAL_TIM_MspPostInit+0xac>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_TIM_MspPostInit+0xac>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c36:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4619      	mov	r1, r3
 8002c52:	480e      	ldr	r0, [pc, #56]	; (8002c8c <HAL_TIM_MspPostInit+0xb0>)
 8002c54:	f000 fdec 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8002c58:	f248 0301 	movw	r3, #32769	; 0x8001
 8002c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	4806      	ldr	r0, [pc, #24]	; (8002c90 <HAL_TIM_MspPostInit+0xb4>)
 8002c76:	f000 fddb 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c7a:	bf00      	nop
 8002c7c:	3728      	adds	r7, #40	; 0x28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400

08002c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c98:	e7fe      	b.n	8002c98 <NMI_Handler+0x4>

08002c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <HardFault_Handler+0x4>

08002ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <MemManage_Handler+0x4>

08002ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <BusFault_Handler+0x4>

08002cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <UsageFault_Handler+0x4>

08002cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce0:	f000 f890 	bl	8002e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <SystemInit+0x20>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <SystemInit+0x20>)
 8002cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d10:	f7ff ffea 	bl	8002ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d14:	480c      	ldr	r0, [pc, #48]	; (8002d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d16:	490d      	ldr	r1, [pc, #52]	; (8002d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d2c:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f002 fcad 	bl	8005698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d3e:	f7fe f8af 	bl	8000ea0 <main>
  bx  lr    
 8002d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002d50:	08006a60 	.word	0x08006a60
  ldr r2, =_sbss
 8002d54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002d58:	2000027c 	.word	0x2000027c

08002d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC_IRQHandler>
	...

08002d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_Init+0x40>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_Init+0x40>)
 8002d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_Init+0x40>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_Init+0x40>)
 8002d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_Init+0x40>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_Init+0x40>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f000 fd1d 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f000 f808 	bl	8002da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d94:	f7ff fe78 	bl	8002a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00

08002da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dac:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_InitTick+0x54>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_InitTick+0x58>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd27 	bl	8003816 <HAL_SYSTICK_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00e      	b.n	8002df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d80a      	bhi.n	8002dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f000 fcfd 	bl	80037de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de4:	4a06      	ldr	r2, [pc, #24]	; (8002e00 <HAL_InitTick+0x5c>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	20000004 	.word	0x20000004

08002e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_IncTick+0x20>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x24>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_IncTick+0x24>)
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000008 	.word	0x20000008
 8002e28:	20000140 	.word	0x20000140

08002e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_GetTick+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000140 	.word	0x20000140

08002e44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e033      	b.n	8002ec2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fe38 	bl	8002ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e8a:	f023 0302 	bic.w	r3, r3, #2
 8002e8e:	f043 0202 	orr.w	r2, r3, #2
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fae8 	bl	800346c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f023 0303 	bic.w	r3, r3, #3
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
 8002eb2:	e001      	b.n	8002eb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_Start+0x1a>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e0b2      	b.n	800304c <HAL_ADC_Start+0x180>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d018      	beq.n	8002f2e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f0c:	4b52      	ldr	r3, [pc, #328]	; (8003058 <HAL_ADC_Start+0x18c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a52      	ldr	r2, [pc, #328]	; (800305c <HAL_ADC_Start+0x190>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0c9a      	lsrs	r2, r3, #18
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f20:	e002      	b.n	8002f28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f9      	bne.n	8002f22 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d17a      	bne.n	8003032 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	d106      	bne.n	8002f8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	f023 0206 	bic.w	r2, r3, #6
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44
 8002f88:	e002      	b.n	8002f90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_ADC_Start+0x194>)
 8002f9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fa4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d12a      	bne.n	8003008 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2b      	ldr	r2, [pc, #172]	; (8003064 <HAL_ADC_Start+0x198>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d015      	beq.n	8002fe8 <HAL_ADC_Start+0x11c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <HAL_ADC_Start+0x19c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d105      	bne.n	8002fd2 <HAL_ADC_Start+0x106>
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_ADC_Start+0x194>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a25      	ldr	r2, [pc, #148]	; (800306c <HAL_ADC_Start+0x1a0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d136      	bne.n	800304a <HAL_ADC_Start+0x17e>
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_ADC_Start+0x194>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d130      	bne.n	800304a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d129      	bne.n	800304a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	e020      	b.n	800304a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a15      	ldr	r2, [pc, #84]	; (8003064 <HAL_ADC_Start+0x198>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d11b      	bne.n	800304a <HAL_ADC_Start+0x17e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d114      	bne.n	800304a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	e00b      	b.n	800304a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f043 0210 	orr.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	20000000 	.word	0x20000000
 800305c:	431bde83 	.word	0x431bde83
 8003060:	40012300 	.word	0x40012300
 8003064:	40012000 	.word	0x40012000
 8003068:	40012100 	.word	0x40012100
 800306c:	40012200 	.word	0x40012200

08003070 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_ADC_Stop+0x16>
 8003082:	2302      	movs	r3, #2
 8003084:	e021      	b.n	80030ca <HAL_ADC_Stop+0x5a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	f043 0201 	orr.w	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d113      	bne.n	800311c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003102:	d10b      	bne.n	800311c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e063      	b.n	80031e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800311c:	f7ff fe86 	bl	8002e2c <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003122:	e021      	b.n	8003168 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d01d      	beq.n	8003168 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_ADC_PollForConversion+0x6c>
 8003132:	f7ff fe7b 	bl	8002e2c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d212      	bcs.n	8003168 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b02      	cmp	r3, #2
 800314e:	d00b      	beq.n	8003168 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e03d      	b.n	80031e4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d1d6      	bne.n	8003124 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0212 	mvn.w	r2, #18
 800317e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d123      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11f      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d111      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e113      	b.n	800344c <HAL_ADC_ConfigChannel+0x244>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b09      	cmp	r3, #9
 8003232:	d925      	bls.n	8003280 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68d9      	ldr	r1, [r3, #12]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	3b1e      	subs	r3, #30
 800324a:	2207      	movs	r2, #7
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43da      	mvns	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	400a      	ands	r2, r1
 8003258:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	4603      	mov	r3, r0
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4403      	add	r3, r0
 8003272:	3b1e      	subs	r3, #30
 8003274:	409a      	lsls	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e022      	b.n	80032c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6919      	ldr	r1, [r3, #16]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	2207      	movs	r2, #7
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	400a      	ands	r2, r1
 80032a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6919      	ldr	r1, [r3, #16]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4403      	add	r3, r0
 80032bc:	409a      	lsls	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d824      	bhi.n	8003318 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	3b05      	subs	r3, #5
 80032e0:	221f      	movs	r2, #31
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	400a      	ands	r2, r1
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4618      	mov	r0, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b05      	subs	r3, #5
 800330a:	fa00 f203 	lsl.w	r2, r0, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	635a      	str	r2, [r3, #52]	; 0x34
 8003316:	e04c      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d824      	bhi.n	800336a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	3b23      	subs	r3, #35	; 0x23
 8003332:	221f      	movs	r2, #31
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43da      	mvns	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	400a      	ands	r2, r1
 8003340:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4618      	mov	r0, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	3b23      	subs	r3, #35	; 0x23
 800335c:	fa00 f203 	lsl.w	r2, r0, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
 8003368:	e023      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	3b41      	subs	r3, #65	; 0x41
 800337c:	221f      	movs	r2, #31
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	400a      	ands	r2, r1
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	4618      	mov	r0, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3b41      	subs	r3, #65	; 0x41
 80033a6:	fa00 f203 	lsl.w	r2, r0, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b2:	4b29      	ldr	r3, [pc, #164]	; (8003458 <HAL_ADC_ConfigChannel+0x250>)
 80033b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a28      	ldr	r2, [pc, #160]	; (800345c <HAL_ADC_ConfigChannel+0x254>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10f      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d8>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b12      	cmp	r3, #18
 80033c6:	d10b      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_ADC_ConfigChannel+0x254>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12b      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <HAL_ADC_ConfigChannel+0x258>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x1f4>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b11      	cmp	r3, #17
 80033fa:	d122      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_ADC_ConfigChannel+0x258>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d111      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_ADC_ConfigChannel+0x25c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_ADC_ConfigChannel+0x260>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	0c9a      	lsrs	r2, r3, #18
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003434:	e002      	b.n	800343c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3b01      	subs	r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f9      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40012300 	.word	0x40012300
 800345c:	40012000 	.word	0x40012000
 8003460:	10000012 	.word	0x10000012
 8003464:	20000000 	.word	0x20000000
 8003468:	431bde83 	.word	0x431bde83

0800346c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <ADC_Init+0x1f0>)
 8003476:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	021a      	lsls	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	4a58      	ldr	r2, [pc, #352]	; (8003660 <ADC_Init+0x1f4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	e00f      	b.n	800356a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003568:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0202 	bic.w	r2, r2, #2
 8003578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7e1b      	ldrb	r3, [r3, #24]
 8003584:	005a      	lsls	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	3b01      	subs	r3, #1
 80035c4:	035a      	lsls	r2, r3, #13
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e007      	b.n	80035e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	051a      	lsls	r2, r3, #20
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003622:	025a      	lsls	r2, r3, #9
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	029a      	lsls	r2, r3, #10
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40012300 	.word	0x40012300
 8003660:	0f000001 	.word	0x0f000001

08003664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800368c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60d3      	str	r3, [r2, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <__NVIC_GetPriorityGrouping+0x18>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	f003 0307 	and.w	r3, r3, #7
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	db0a      	blt.n	80036f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	490c      	ldr	r1, [pc, #48]	; (8003714 <__NVIC_SetPriority+0x4c>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f0:	e00a      	b.n	8003708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4908      	ldr	r1, [pc, #32]	; (8003718 <__NVIC_SetPriority+0x50>)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	3b04      	subs	r3, #4
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	440b      	add	r3, r1
 8003706:	761a      	strb	r2, [r3, #24]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f1c3 0307 	rsb	r3, r3, #7
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf28      	it	cs
 800373a:	2304      	movcs	r3, #4
 800373c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3304      	adds	r3, #4
 8003742:	2b06      	cmp	r3, #6
 8003744:	d902      	bls.n	800374c <NVIC_EncodePriority+0x30>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3b03      	subs	r3, #3
 800374a:	e000      	b.n	800374e <NVIC_EncodePriority+0x32>
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	401a      	ands	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003764:	f04f 31ff 	mov.w	r1, #4294967295
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	43d9      	mvns	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	4313      	orrs	r3, r2
         );
}
 8003776:	4618      	mov	r0, r3
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003794:	d301      	bcc.n	800379a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003796:	2301      	movs	r3, #1
 8003798:	e00f      	b.n	80037ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <SysTick_Config+0x40>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a2:	210f      	movs	r1, #15
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f7ff ff8e 	bl	80036c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <SysTick_Config+0x40>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b2:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <SysTick_Config+0x40>)
 80037b4:	2207      	movs	r2, #7
 80037b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff47 	bl	8003664 <__NVIC_SetPriorityGrouping>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f0:	f7ff ff5c 	bl	80036ac <__NVIC_GetPriorityGrouping>
 80037f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff8e 	bl	800371c <NVIC_EncodePriority>
 8003800:	4602      	mov	r2, r0
 8003802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff5d 	bl	80036c8 <__NVIC_SetPriority>
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffb0 	bl	8003784 <SysTick_Config>
 8003824:	4603      	mov	r3, r0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e165      	b.n	8003b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	f040 8154 	bne.w	8003b12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d005      	beq.n	8003882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	2b02      	cmp	r3, #2
 8003880:	d130      	bne.n	80038e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0201 	and.w	r2, r3, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d017      	beq.n	8003920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d123      	bne.n	8003974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	69b9      	ldr	r1, [r7, #24]
 8003970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0203 	and.w	r2, r3, #3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80ae 	beq.w	8003b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b5d      	ldr	r3, [pc, #372]	; (8003b30 <HAL_GPIO_Init+0x300>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	4a5c      	ldr	r2, [pc, #368]	; (8003b30 <HAL_GPIO_Init+0x300>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c4:	6453      	str	r3, [r2, #68]	; 0x44
 80039c6:	4b5a      	ldr	r3, [pc, #360]	; (8003b30 <HAL_GPIO_Init+0x300>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d2:	4a58      	ldr	r2, [pc, #352]	; (8003b34 <HAL_GPIO_Init+0x304>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	220f      	movs	r2, #15
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4f      	ldr	r2, [pc, #316]	; (8003b38 <HAL_GPIO_Init+0x308>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d025      	beq.n	8003a4a <HAL_GPIO_Init+0x21a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4e      	ldr	r2, [pc, #312]	; (8003b3c <HAL_GPIO_Init+0x30c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01f      	beq.n	8003a46 <HAL_GPIO_Init+0x216>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4d      	ldr	r2, [pc, #308]	; (8003b40 <HAL_GPIO_Init+0x310>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d019      	beq.n	8003a42 <HAL_GPIO_Init+0x212>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4c      	ldr	r2, [pc, #304]	; (8003b44 <HAL_GPIO_Init+0x314>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_Init+0x20e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4b      	ldr	r2, [pc, #300]	; (8003b48 <HAL_GPIO_Init+0x318>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_Init+0x20a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4a      	ldr	r2, [pc, #296]	; (8003b4c <HAL_GPIO_Init+0x31c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x206>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a49      	ldr	r2, [pc, #292]	; (8003b50 <HAL_GPIO_Init+0x320>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_Init+0x202>
 8003a2e:	2306      	movs	r3, #6
 8003a30:	e00c      	b.n	8003a4c <HAL_GPIO_Init+0x21c>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e00a      	b.n	8003a4c <HAL_GPIO_Init+0x21c>
 8003a36:	2305      	movs	r3, #5
 8003a38:	e008      	b.n	8003a4c <HAL_GPIO_Init+0x21c>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e006      	b.n	8003a4c <HAL_GPIO_Init+0x21c>
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e004      	b.n	8003a4c <HAL_GPIO_Init+0x21c>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e002      	b.n	8003a4c <HAL_GPIO_Init+0x21c>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_GPIO_Init+0x21c>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f002 0203 	and.w	r2, r2, #3
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	4093      	lsls	r3, r2
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a5c:	4935      	ldr	r1, [pc, #212]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	3302      	adds	r3, #2
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6a:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a8e:	4a31      	ldr	r2, [pc, #196]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a94:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab8:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003abe:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae2:	4a1c      	ldr	r2, [pc, #112]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b0c:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b0f      	cmp	r3, #15
 8003b1c:	f67f ae96 	bls.w	800384c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40013800 	.word	0x40013800
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40020400 	.word	0x40020400
 8003b40:	40020800 	.word	0x40020800
 8003b44:	40020c00 	.word	0x40020c00
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40021400 	.word	0x40021400
 8003b50:	40021800 	.word	0x40021800
 8003b54:	40013c00 	.word	0x40013c00

08003b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	807b      	strh	r3, [r7, #2]
 8003b64:	4613      	mov	r3, r2
 8003b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b68:	787b      	ldrb	r3, [r7, #1]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b6e:	887a      	ldrh	r2, [r7, #2]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b74:	e003      	b.n	8003b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b76:	887b      	ldrh	r3, [r7, #2]
 8003b78:	041a      	lsls	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	619a      	str	r2, [r3, #24]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0cc      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b68      	ldr	r3, [pc, #416]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d90c      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b63      	ldr	r3, [pc, #396]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0b8      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be0:	4b59      	ldr	r3, [pc, #356]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a58      	ldr	r2, [pc, #352]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf8:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a52      	ldr	r2, [pc, #328]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b50      	ldr	r3, [pc, #320]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	494d      	ldr	r1, [pc, #308]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d044      	beq.n	8003cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d119      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e07f      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d003      	beq.n	8003c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4a:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e06f      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e067      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 0203 	bic.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4934      	ldr	r1, [pc, #208]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c7c:	f7ff f8d6 	bl	8002e2c <HAL_GetTick>
 8003c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7ff f8d2 	bl	8002e2c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e04f      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 020c 	and.w	r2, r3, #12
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1eb      	bne.n	8003c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cac:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d20c      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e032      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4916      	ldr	r1, [pc, #88]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	490e      	ldr	r1, [pc, #56]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d12:	f000 f821 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	490a      	ldr	r1, [pc, #40]	; (8003d4c <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	5ccb      	ldrb	r3, [r1, r3]
 8003d26:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2a:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_RCC_ClockConfig+0x1c8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff f836 	bl	8002da4 <HAL_InitTick>

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023c00 	.word	0x40023c00
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	08006868 	.word	0x08006868
 8003d50:	20000000 	.word	0x20000000
 8003d54:	20000004 	.word	0x20000004

08003d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d5c:	b0ae      	sub	sp, #184	; 0xb8
 8003d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d7e:	4bcb      	ldr	r3, [pc, #812]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	f200 8206 	bhi.w	8004198 <HAL_RCC_GetSysClockFreq+0x440>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08004199 	.word	0x08004199
 8003d9c:	08004199 	.word	0x08004199
 8003da0:	08004199 	.word	0x08004199
 8003da4:	08003dd1 	.word	0x08003dd1
 8003da8:	08004199 	.word	0x08004199
 8003dac:	08004199 	.word	0x08004199
 8003db0:	08004199 	.word	0x08004199
 8003db4:	08003dd9 	.word	0x08003dd9
 8003db8:	08004199 	.word	0x08004199
 8003dbc:	08004199 	.word	0x08004199
 8003dc0:	08004199 	.word	0x08004199
 8003dc4:	08003fc9 	.word	0x08003fc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4bb9      	ldr	r3, [pc, #740]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003dce:	e1e7      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dd0:	4bb8      	ldr	r3, [pc, #736]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dd6:	e1e3      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd8:	4bb4      	ldr	r3, [pc, #720]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de4:	4bb1      	ldr	r3, [pc, #708]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d071      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df0:	4bae      	ldr	r3, [pc, #696]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dfc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	f04f 0000 	mov.w	r0, #0
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	0159      	lsls	r1, r3, #5
 8003e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e28:	0150      	lsls	r0, r2, #5
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4621      	mov	r1, r4
 8003e30:	1a51      	subs	r1, r2, r1
 8003e32:	6439      	str	r1, [r7, #64]	; 0x40
 8003e34:	4629      	mov	r1, r5
 8003e36:	eb63 0301 	sbc.w	r3, r3, r1
 8003e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e48:	4649      	mov	r1, r9
 8003e4a:	018b      	lsls	r3, r1, #6
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e52:	4641      	mov	r1, r8
 8003e54:	018a      	lsls	r2, r1, #6
 8003e56:	4641      	mov	r1, r8
 8003e58:	1a51      	subs	r1, r2, r1
 8003e5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e70:	4649      	mov	r1, r9
 8003e72:	00cb      	lsls	r3, r1, #3
 8003e74:	4641      	mov	r1, r8
 8003e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	00ca      	lsls	r2, r1, #3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	4622      	mov	r2, r4
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	460a      	mov	r2, r1
 8003e8e:	eb42 0303 	adc.w	r3, r2, r3
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	024b      	lsls	r3, r1, #9
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003eaa:	4621      	mov	r1, r4
 8003eac:	024a      	lsls	r2, r1, #9
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ebc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ec0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ec4:	f7fc fe6e 	bl	8000ba4 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed2:	e067      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed4:	4b75      	ldr	r3, [pc, #468]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	099b      	lsrs	r3, r3, #6
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ee0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ee4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eee:	2300      	movs	r3, #0
 8003ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ef2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	462b      	mov	r3, r5
 8003efa:	f04f 0000 	mov.w	r0, #0
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	0159      	lsls	r1, r3, #5
 8003f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f08:	0150      	lsls	r0, r2, #5
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4621      	mov	r1, r4
 8003f10:	1a51      	subs	r1, r2, r1
 8003f12:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f14:	4629      	mov	r1, r5
 8003f16:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f28:	4649      	mov	r1, r9
 8003f2a:	018b      	lsls	r3, r1, #6
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f32:	4641      	mov	r1, r8
 8003f34:	018a      	lsls	r2, r1, #6
 8003f36:	4641      	mov	r1, r8
 8003f38:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f56:	4692      	mov	sl, r2
 8003f58:	469b      	mov	fp, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	eb1a 0303 	adds.w	r3, sl, r3
 8003f60:	623b      	str	r3, [r7, #32]
 8003f62:	462b      	mov	r3, r5
 8003f64:	eb4b 0303 	adc.w	r3, fp, r3
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f76:	4629      	mov	r1, r5
 8003f78:	028b      	lsls	r3, r1, #10
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f80:	4621      	mov	r1, r4
 8003f82:	028a      	lsls	r2, r1, #10
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f90:	677a      	str	r2, [r7, #116]	; 0x74
 8003f92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f96:	f7fc fe05 	bl	8000ba4 <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fa4:	4b41      	ldr	r3, [pc, #260]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fc6:	e0eb      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc8:	4b38      	ldr	r3, [pc, #224]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd4:	4b35      	ldr	r3, [pc, #212]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d06b      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe0:	4b32      	ldr	r3, [pc, #200]	; (80040ac <HAL_RCC_GetSysClockFreq+0x354>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	099b      	lsrs	r3, r3, #6
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ff8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	462b      	mov	r3, r5
 8004000:	f04f 0000 	mov.w	r0, #0
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	0159      	lsls	r1, r3, #5
 800400a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800400e:	0150      	lsls	r0, r2, #5
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4621      	mov	r1, r4
 8004016:	1a51      	subs	r1, r2, r1
 8004018:	61b9      	str	r1, [r7, #24]
 800401a:	4629      	mov	r1, r5
 800401c:	eb63 0301 	sbc.w	r3, r3, r1
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800402e:	4659      	mov	r1, fp
 8004030:	018b      	lsls	r3, r1, #6
 8004032:	4651      	mov	r1, sl
 8004034:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004038:	4651      	mov	r1, sl
 800403a:	018a      	lsls	r2, r1, #6
 800403c:	4651      	mov	r1, sl
 800403e:	ebb2 0801 	subs.w	r8, r2, r1
 8004042:	4659      	mov	r1, fp
 8004044:	eb63 0901 	sbc.w	r9, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004054:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004058:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405c:	4690      	mov	r8, r2
 800405e:	4699      	mov	r9, r3
 8004060:	4623      	mov	r3, r4
 8004062:	eb18 0303 	adds.w	r3, r8, r3
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	462b      	mov	r3, r5
 800406a:	eb49 0303 	adc.w	r3, r9, r3
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800407c:	4629      	mov	r1, r5
 800407e:	024b      	lsls	r3, r1, #9
 8004080:	4621      	mov	r1, r4
 8004082:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004086:	4621      	mov	r1, r4
 8004088:	024a      	lsls	r2, r1, #9
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004092:	2200      	movs	r2, #0
 8004094:	65bb      	str	r3, [r7, #88]	; 0x58
 8004096:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004098:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800409c:	f7fc fd82 	bl	8000ba4 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4613      	mov	r3, r2
 80040a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040aa:	e065      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x420>
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b8:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	099b      	lsrs	r3, r3, #6
 80040be:	2200      	movs	r2, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	4611      	mov	r1, r2
 80040c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040c8:	653b      	str	r3, [r7, #80]	; 0x50
 80040ca:	2300      	movs	r3, #0
 80040cc:	657b      	str	r3, [r7, #84]	; 0x54
 80040ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80040d2:	4642      	mov	r2, r8
 80040d4:	464b      	mov	r3, r9
 80040d6:	f04f 0000 	mov.w	r0, #0
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	0159      	lsls	r1, r3, #5
 80040e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e4:	0150      	lsls	r0, r2, #5
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4641      	mov	r1, r8
 80040ec:	1a51      	subs	r1, r2, r1
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	4649      	mov	r1, r9
 80040f2:	eb63 0301 	sbc.w	r3, r3, r1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004104:	4659      	mov	r1, fp
 8004106:	018b      	lsls	r3, r1, #6
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410e:	4651      	mov	r1, sl
 8004110:	018a      	lsls	r2, r1, #6
 8004112:	4651      	mov	r1, sl
 8004114:	1a54      	subs	r4, r2, r1
 8004116:	4659      	mov	r1, fp
 8004118:	eb63 0501 	sbc.w	r5, r3, r1
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	00eb      	lsls	r3, r5, #3
 8004126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412a:	00e2      	lsls	r2, r4, #3
 800412c:	4614      	mov	r4, r2
 800412e:	461d      	mov	r5, r3
 8004130:	4643      	mov	r3, r8
 8004132:	18e3      	adds	r3, r4, r3
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	464b      	mov	r3, r9
 8004138:	eb45 0303 	adc.w	r3, r5, r3
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800414a:	4629      	mov	r1, r5
 800414c:	028b      	lsls	r3, r1, #10
 800414e:	4621      	mov	r1, r4
 8004150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004154:	4621      	mov	r1, r4
 8004156:	028a      	lsls	r2, r1, #10
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004160:	2200      	movs	r2, #0
 8004162:	64bb      	str	r3, [r7, #72]	; 0x48
 8004164:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004166:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800416a:	f7fc fd1b 	bl	8000ba4 <__aeabi_uldivmod>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4613      	mov	r3, r2
 8004174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	0f1b      	lsrs	r3, r3, #28
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800418a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004196:	e003      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800419a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800419e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	37b8      	adds	r7, #184	; 0xb8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	00f42400 	.word	0x00f42400

080041b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e28d      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8083 	beq.w	80042de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041d8:	4b94      	ldr	r3, [pc, #592]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d019      	beq.n	8004218 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041e4:	4b91      	ldr	r3, [pc, #580]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041f0:	4b8e      	ldr	r3, [pc, #568]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041fc:	d00c      	beq.n	8004218 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fe:	4b8b      	ldr	r3, [pc, #556]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004206:	2b0c      	cmp	r3, #12
 8004208:	d112      	bne.n	8004230 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420a:	4b88      	ldr	r3, [pc, #544]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004216:	d10b      	bne.n	8004230 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004218:	4b84      	ldr	r3, [pc, #528]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d05b      	beq.n	80042dc <HAL_RCC_OscConfig+0x124>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d157      	bne.n	80042dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e25a      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d106      	bne.n	8004248 <HAL_RCC_OscConfig+0x90>
 800423a:	4b7c      	ldr	r3, [pc, #496]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7b      	ldr	r2, [pc, #492]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e01d      	b.n	8004284 <HAL_RCC_OscConfig+0xcc>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0xb4>
 8004252:	4b76      	ldr	r3, [pc, #472]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a75      	ldr	r2, [pc, #468]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b73      	ldr	r3, [pc, #460]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a72      	ldr	r2, [pc, #456]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0xcc>
 800426c:	4b6f      	ldr	r3, [pc, #444]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a6e      	ldr	r2, [pc, #440]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b6c      	ldr	r3, [pc, #432]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6b      	ldr	r2, [pc, #428]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800427e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fe fdce 	bl	8002e2c <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004294:	f7fe fdca 	bl	8002e2c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e21f      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b61      	ldr	r3, [pc, #388]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0xdc>
 80042b2:	e014      	b.n	80042de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fe fdba 	bl	8002e2c <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe fdb6 	bl	8002e2c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e20b      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ce:	4b57      	ldr	r3, [pc, #348]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x104>
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d06f      	beq.n	80043ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042ea:	4b50      	ldr	r3, [pc, #320]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d017      	beq.n	8004326 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042f6:	4b4d      	ldr	r3, [pc, #308]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d105      	bne.n	800430e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004302:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d11c      	bne.n	8004354 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d116      	bne.n	8004354 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x186>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e1d3      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	4b3b      	ldr	r3, [pc, #236]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4937      	ldr	r1, [pc, #220]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	e03a      	b.n	80043ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800435c:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCC_OscConfig+0x278>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fe fd63 	bl	8002e2c <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436a:	f7fe fd5f 	bl	8002e2c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e1b4      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	4b2b      	ldr	r3, [pc, #172]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b28      	ldr	r3, [pc, #160]	; (800442c <HAL_RCC_OscConfig+0x274>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4925      	ldr	r1, [pc, #148]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCC_OscConfig+0x278>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fe fd42 	bl	8002e2c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fe fd3e 	bl	8002e2c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e193      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d036      	beq.n	8004444 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fe fd22 	bl	8002e2c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ec:	f7fe fd1e 	bl	8002e2c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e173      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x234>
 800440a:	e01b      	b.n	8004444 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004412:	f7fe fd0b 	bl	8002e2c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	e00e      	b.n	8004438 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441a:	f7fe fd07 	bl	8002e2c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d907      	bls.n	8004438 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e15c      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
 800442c:	40023800 	.word	0x40023800
 8004430:	42470000 	.word	0x42470000
 8004434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	4b8a      	ldr	r3, [pc, #552]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1ea      	bne.n	800441a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8097 	beq.w	8004580 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004452:	2300      	movs	r3, #0
 8004454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004456:	4b83      	ldr	r3, [pc, #524]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a7e      	ldr	r2, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b7c      	ldr	r3, [pc, #496]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004482:	4b79      	ldr	r3, [pc, #484]	; (8004668 <HAL_RCC_OscConfig+0x4b0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d118      	bne.n	80044c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448e:	4b76      	ldr	r3, [pc, #472]	; (8004668 <HAL_RCC_OscConfig+0x4b0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a75      	ldr	r2, [pc, #468]	; (8004668 <HAL_RCC_OscConfig+0x4b0>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449a:	f7fe fcc7 	bl	8002e2c <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fe fcc3 	bl	8002e2c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e118      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <HAL_RCC_OscConfig+0x4b0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_OscConfig+0x31e>
 80044c8:	4b66      	ldr	r3, [pc, #408]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a65      	ldr	r2, [pc, #404]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	e01c      	b.n	8004510 <HAL_RCC_OscConfig+0x358>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x340>
 80044de:	4b61      	ldr	r3, [pc, #388]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a60      	ldr	r2, [pc, #384]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ea:	4b5e      	ldr	r3, [pc, #376]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a5d      	ldr	r2, [pc, #372]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	e00b      	b.n	8004510 <HAL_RCC_OscConfig+0x358>
 80044f8:	4b5a      	ldr	r3, [pc, #360]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a59      	ldr	r2, [pc, #356]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
 8004504:	4b57      	ldr	r3, [pc, #348]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4a56      	ldr	r2, [pc, #344]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 800450a:	f023 0304 	bic.w	r3, r3, #4
 800450e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fe fc88 	bl	8002e2c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fe fc84 	bl	8002e2c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0d7      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004536:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ee      	beq.n	8004520 <HAL_RCC_OscConfig+0x368>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fe fc72 	bl	8002e2c <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454a:	e00a      	b.n	8004562 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454c:	f7fe fc6e 	bl	8002e2c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0c1      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004562:	4b40      	ldr	r3, [pc, #256]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1ee      	bne.n	800454c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004574:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	4a3a      	ldr	r2, [pc, #232]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 800457a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80ad 	beq.w	80046e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b08      	cmp	r3, #8
 8004594:	d060      	beq.n	8004658 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d145      	bne.n	800462a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_RCC_OscConfig+0x4b4>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fe fc42 	bl	8002e2c <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ac:	f7fe fc3e 	bl	8002e2c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e093      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	019b      	lsls	r3, r3, #6
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	3b01      	subs	r3, #1
 80045e4:	041b      	lsls	r3, r3, #16
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	071b      	lsls	r3, r3, #28
 80045f6:	491b      	ldr	r1, [pc, #108]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045fc:	4b1b      	ldr	r3, [pc, #108]	; (800466c <HAL_RCC_OscConfig+0x4b4>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fe fc13 	bl	8002e2c <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460a:	f7fe fc0f 	bl	8002e2c <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e064      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x452>
 8004628:	e05c      	b.n	80046e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_RCC_OscConfig+0x4b4>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fe fbfc 	bl	8002e2c <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004638:	f7fe fbf8 	bl	8002e2c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e04d      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_OscConfig+0x4ac>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x480>
 8004656:	e045      	b.n	80046e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d107      	bne.n	8004670 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e040      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
 8004664:	40023800 	.word	0x40023800
 8004668:	40007000 	.word	0x40007000
 800466c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <HAL_RCC_OscConfig+0x538>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d030      	beq.n	80046e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d129      	bne.n	80046e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d122      	bne.n	80046e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d119      	bne.n	80046e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	3b01      	subs	r3, #1
 80046ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d10f      	bne.n	80046e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d107      	bne.n	80046e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800

080046f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e041      	b.n	800478a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fe fa3c 	bl	8002b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 fad8 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e041      	b.n	8004828 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f839 	bl	8004830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f000 fa89 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start+0x24>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e022      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d109      	bne.n	8004882 <HAL_TIM_PWM_Start+0x3e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e015      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start+0x58>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e008      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07c      	b.n	80049b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x82>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c4:	e013      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x92>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d4:	e00b      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xa2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e4:	e003      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fcec 	bl	80052d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <HAL_TIM_PWM_Start+0x174>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_PWM_Start+0xcc>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <HAL_TIM_PWM_Start+0x178>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <HAL_TIM_PWM_Start+0xd0>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_TIM_PWM_Start+0xd2>
 8004914:	2300      	movs	r3, #0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a22      	ldr	r2, [pc, #136]	; (80049b8 <HAL_TIM_PWM_Start+0x174>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d01d      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <HAL_TIM_PWM_Start+0x17c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_TIM_PWM_Start+0x180>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_TIM_PWM_Start+0x184>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a16      	ldr	r2, [pc, #88]	; (80049bc <HAL_TIM_PWM_Start+0x178>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a18      	ldr	r2, [pc, #96]	; (80049cc <HAL_TIM_PWM_Start+0x188>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <HAL_TIM_PWM_Start+0x18c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d111      	bne.n	800499e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b06      	cmp	r3, #6
 800498a:	d010      	beq.n	80049ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	e007      	b.n	80049ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0201 	orr.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40001800 	.word	0x40001800

080049d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e0ae      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	f200 809f 	bhi.w	8004b40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004b41 	.word	0x08004b41
 8004a10:	08004b41 	.word	0x08004b41
 8004a14:	08004b41 	.word	0x08004b41
 8004a18:	08004a7d 	.word	0x08004a7d
 8004a1c:	08004b41 	.word	0x08004b41
 8004a20:	08004b41 	.word	0x08004b41
 8004a24:	08004b41 	.word	0x08004b41
 8004a28:	08004abf 	.word	0x08004abf
 8004a2c:	08004b41 	.word	0x08004b41
 8004a30:	08004b41 	.word	0x08004b41
 8004a34:	08004b41 	.word	0x08004b41
 8004a38:	08004aff 	.word	0x08004aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f9fc 	bl	8004e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0208 	orr.w	r2, r2, #8
 8004a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6999      	ldr	r1, [r3, #24]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	619a      	str	r2, [r3, #24]
      break;
 8004a7a:	e064      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fa4c 	bl	8004f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6999      	ldr	r1, [r3, #24]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	021a      	lsls	r2, r3, #8
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	619a      	str	r2, [r3, #24]
      break;
 8004abc:	e043      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 faa1 	bl	800500c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0208 	orr.w	r2, r2, #8
 8004ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0204 	bic.w	r2, r2, #4
 8004ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69d9      	ldr	r1, [r3, #28]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	61da      	str	r2, [r3, #28]
      break;
 8004afc:	e023      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 faf5 	bl	80050f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69d9      	ldr	r1, [r3, #28]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	021a      	lsls	r2, r3, #8
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	61da      	str	r2, [r3, #28]
      break;
 8004b3e:	e002      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
      break;
 8004b44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIM_ConfigClockSource+0x1c>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0b4      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x186>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bac:	d03e      	beq.n	8004c2c <HAL_TIM_ConfigClockSource+0xd4>
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb2:	f200 8087 	bhi.w	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	f000 8086 	beq.w	8004cca <HAL_TIM_ConfigClockSource+0x172>
 8004bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc2:	d87f      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc4:	2b70      	cmp	r3, #112	; 0x70
 8004bc6:	d01a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0xa6>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d87b      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bcc:	2b60      	cmp	r3, #96	; 0x60
 8004bce:	d050      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x11a>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d877      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	2b50      	cmp	r3, #80	; 0x50
 8004bd6:	d03c      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0xfa>
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d873      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d058      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x13a>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d86f      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d064      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d86b      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d060      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d867      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d05c      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d05a      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bfc:	e062      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c0e:	f000 fb41 	bl	8005294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	609a      	str	r2, [r3, #8]
      break;
 8004c2a:	e04f      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c3c:	f000 fb2a 	bl	8005294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c4e:	609a      	str	r2, [r3, #8]
      break;
 8004c50:	e03c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f000 fa9e 	bl	80051a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2150      	movs	r1, #80	; 0x50
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 faf7 	bl	800525e <TIM_ITRx_SetConfig>
      break;
 8004c70:	e02c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 fabd 	bl	80051fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2160      	movs	r1, #96	; 0x60
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fae7 	bl	800525e <TIM_ITRx_SetConfig>
      break;
 8004c90:	e01c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 fa7e 	bl	80051a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2140      	movs	r1, #64	; 0x40
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fad7 	bl	800525e <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e00c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f000 face 	bl	800525e <TIM_ITRx_SetConfig>
      break;
 8004cc2:	e003      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc8:	e000      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a46      	ldr	r2, [pc, #280]	; (8004e14 <TIM_Base_SetConfig+0x12c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d06:	d00f      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a43      	ldr	r2, [pc, #268]	; (8004e18 <TIM_Base_SetConfig+0x130>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a42      	ldr	r2, [pc, #264]	; (8004e1c <TIM_Base_SetConfig+0x134>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a41      	ldr	r2, [pc, #260]	; (8004e20 <TIM_Base_SetConfig+0x138>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <TIM_Base_SetConfig+0x13c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a35      	ldr	r2, [pc, #212]	; (8004e14 <TIM_Base_SetConfig+0x12c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d02b      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d027      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a32      	ldr	r2, [pc, #200]	; (8004e18 <TIM_Base_SetConfig+0x130>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d023      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a31      	ldr	r2, [pc, #196]	; (8004e1c <TIM_Base_SetConfig+0x134>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01f      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <TIM_Base_SetConfig+0x138>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01b      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <TIM_Base_SetConfig+0x13c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d017      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2e      	ldr	r2, [pc, #184]	; (8004e28 <TIM_Base_SetConfig+0x140>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2d      	ldr	r2, [pc, #180]	; (8004e2c <TIM_Base_SetConfig+0x144>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00f      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <TIM_Base_SetConfig+0x148>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <TIM_Base_SetConfig+0x14c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <TIM_Base_SetConfig+0x150>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <TIM_Base_SetConfig+0x154>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d108      	bne.n	8004dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <TIM_Base_SetConfig+0x12c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_Base_SetConfig+0xf8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a12      	ldr	r2, [pc, #72]	; (8004e24 <TIM_Base_SetConfig+0x13c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d103      	bne.n	8004de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d105      	bne.n	8004e06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	611a      	str	r2, [r3, #16]
  }
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40010400 	.word	0x40010400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800
 8004e34:	40001800 	.word	0x40001800
 8004e38:	40001c00 	.word	0x40001c00
 8004e3c:	40002000 	.word	0x40002000

08004e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	f023 0201 	bic.w	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 0302 	bic.w	r3, r3, #2
 8004e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <TIM_OC1_SetConfig+0xd8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_OC1_SetConfig+0x64>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <TIM_OC1_SetConfig+0xdc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d10c      	bne.n	8004ebe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0308 	bic.w	r3, r3, #8
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f023 0304 	bic.w	r3, r3, #4
 8004ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <TIM_OC1_SetConfig+0xd8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC1_SetConfig+0x8e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <TIM_OC1_SetConfig+0xdc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d111      	bne.n	8004ef2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	621a      	str	r2, [r3, #32]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40010400 	.word	0x40010400

08004f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f023 0210 	bic.w	r2, r3, #16
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0320 	bic.w	r3, r3, #32
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a22      	ldr	r2, [pc, #136]	; (8005004 <TIM_OC2_SetConfig+0xe4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC2_SetConfig+0x68>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a21      	ldr	r2, [pc, #132]	; (8005008 <TIM_OC2_SetConfig+0xe8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d10d      	bne.n	8004fa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a17      	ldr	r2, [pc, #92]	; (8005004 <TIM_OC2_SetConfig+0xe4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_OC2_SetConfig+0x94>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a16      	ldr	r2, [pc, #88]	; (8005008 <TIM_OC2_SetConfig+0xe8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d113      	bne.n	8004fdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40010400 	.word	0x40010400

0800500c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a21      	ldr	r2, [pc, #132]	; (80050ec <TIM_OC3_SetConfig+0xe0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <TIM_OC3_SetConfig+0x66>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a20      	ldr	r2, [pc, #128]	; (80050f0 <TIM_OC3_SetConfig+0xe4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10d      	bne.n	800508e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800508c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a16      	ldr	r2, [pc, #88]	; (80050ec <TIM_OC3_SetConfig+0xe0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_OC3_SetConfig+0x92>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <TIM_OC3_SetConfig+0xe4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d113      	bne.n	80050c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	621a      	str	r2, [r3, #32]
}
 80050e0:	bf00      	nop
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40010400 	.word	0x40010400

080050f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800513e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a12      	ldr	r2, [pc, #72]	; (8005198 <TIM_OC4_SetConfig+0xa4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_OC4_SetConfig+0x68>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a11      	ldr	r2, [pc, #68]	; (800519c <TIM_OC4_SetConfig+0xa8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d109      	bne.n	8005170 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	019b      	lsls	r3, r3, #6
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40010400 	.word	0x40010400

080051a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f023 0201 	bic.w	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f023 030a 	bic.w	r3, r3, #10
 80051dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051fe:	b480      	push	{r7}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f023 0210 	bic.w	r2, r3, #16
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800523a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	f043 0307 	orr.w	r3, r3, #7
 8005280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	609a      	str	r2, [r3, #8]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	021a      	lsls	r2, r3, #8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	2201      	movs	r2, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1a      	ldr	r2, [r3, #32]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	43db      	mvns	r3, r3
 80052f6:	401a      	ands	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1a      	ldr	r2, [r3, #32]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	fa01 f303 	lsl.w	r3, r1, r3
 800530c:	431a      	orrs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d109      	bne.n	8005344 <HAL_TIMEx_PWMN_Start+0x24>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	e022      	b.n	800538a <HAL_TIMEx_PWMN_Start+0x6a>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d109      	bne.n	800535e <HAL_TIMEx_PWMN_Start+0x3e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	e015      	b.n	800538a <HAL_TIMEx_PWMN_Start+0x6a>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d109      	bne.n	8005378 <HAL_TIMEx_PWMN_Start+0x58>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	e008      	b.n	800538a <HAL_TIMEx_PWMN_Start+0x6a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06d      	b.n	800546e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <HAL_TIMEx_PWMN_Start+0x82>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a0:	e013      	b.n	80053ca <HAL_TIMEx_PWMN_Start+0xaa>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d104      	bne.n	80053b2 <HAL_TIMEx_PWMN_Start+0x92>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b0:	e00b      	b.n	80053ca <HAL_TIMEx_PWMN_Start+0xaa>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d104      	bne.n	80053c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c0:	e003      	b.n	80053ca <HAL_TIMEx_PWMN_Start+0xaa>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2204      	movs	r2, #4
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f92c 	bl	8005630 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a22      	ldr	r2, [pc, #136]	; (8005478 <HAL_TIMEx_PWMN_Start+0x158>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d022      	beq.n	8005438 <HAL_TIMEx_PWMN_Start+0x118>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fa:	d01d      	beq.n	8005438 <HAL_TIMEx_PWMN_Start+0x118>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1e      	ldr	r2, [pc, #120]	; (800547c <HAL_TIMEx_PWMN_Start+0x15c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d018      	beq.n	8005438 <HAL_TIMEx_PWMN_Start+0x118>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <HAL_TIMEx_PWMN_Start+0x160>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <HAL_TIMEx_PWMN_Start+0x118>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <HAL_TIMEx_PWMN_Start+0x164>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00e      	beq.n	8005438 <HAL_TIMEx_PWMN_Start+0x118>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <HAL_TIMEx_PWMN_Start+0x168>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d009      	beq.n	8005438 <HAL_TIMEx_PWMN_Start+0x118>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_TIMEx_PWMN_Start+0x16c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIMEx_PWMN_Start+0x118>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a17      	ldr	r2, [pc, #92]	; (8005490 <HAL_TIMEx_PWMN_Start+0x170>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d111      	bne.n	800545c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b06      	cmp	r3, #6
 8005448:	d010      	beq.n	800546c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545a:	e007      	b.n	800546c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800
 8005484:	40000c00 	.word	0x40000c00
 8005488:	40010400 	.word	0x40010400
 800548c:	40014000 	.word	0x40014000
 8005490:	40001800 	.word	0x40001800

08005494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e05a      	b.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a21      	ldr	r2, [pc, #132]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f8:	d01d      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1a      	ldr	r2, [pc, #104]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a17      	ldr	r2, [pc, #92]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a15      	ldr	r2, [pc, #84]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10c      	bne.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4313      	orrs	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800
 800557c:	40000c00 	.word	0x40000c00
 8005580:	40010400 	.word	0x40010400
 8005584:	40014000 	.word	0x40014000
 8005588:	40001800 	.word	0x40001800

0800558c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e03d      	b.n	8005624 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	2204      	movs	r2, #4
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	43db      	mvns	r3, r3
 8005652:	401a      	ands	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	431a      	orrs	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <memset>:
 800567a:	4402      	add	r2, r0
 800567c:	4603      	mov	r3, r0
 800567e:	4293      	cmp	r3, r2
 8005680:	d100      	bne.n	8005684 <memset+0xa>
 8005682:	4770      	bx	lr
 8005684:	f803 1b01 	strb.w	r1, [r3], #1
 8005688:	e7f9      	b.n	800567e <memset+0x4>
	...

0800568c <__errno>:
 800568c:	4b01      	ldr	r3, [pc, #4]	; (8005694 <__errno+0x8>)
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000058 	.word	0x20000058

08005698 <__libc_init_array>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	4d0d      	ldr	r5, [pc, #52]	; (80056d0 <__libc_init_array+0x38>)
 800569c:	4c0d      	ldr	r4, [pc, #52]	; (80056d4 <__libc_init_array+0x3c>)
 800569e:	1b64      	subs	r4, r4, r5
 80056a0:	10a4      	asrs	r4, r4, #2
 80056a2:	2600      	movs	r6, #0
 80056a4:	42a6      	cmp	r6, r4
 80056a6:	d109      	bne.n	80056bc <__libc_init_array+0x24>
 80056a8:	4d0b      	ldr	r5, [pc, #44]	; (80056d8 <__libc_init_array+0x40>)
 80056aa:	4c0c      	ldr	r4, [pc, #48]	; (80056dc <__libc_init_array+0x44>)
 80056ac:	f001 f8d0 	bl	8006850 <_init>
 80056b0:	1b64      	subs	r4, r4, r5
 80056b2:	10a4      	asrs	r4, r4, #2
 80056b4:	2600      	movs	r6, #0
 80056b6:	42a6      	cmp	r6, r4
 80056b8:	d105      	bne.n	80056c6 <__libc_init_array+0x2e>
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c0:	4798      	blx	r3
 80056c2:	3601      	adds	r6, #1
 80056c4:	e7ee      	b.n	80056a4 <__libc_init_array+0xc>
 80056c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ca:	4798      	blx	r3
 80056cc:	3601      	adds	r6, #1
 80056ce:	e7f2      	b.n	80056b6 <__libc_init_array+0x1e>
 80056d0:	08006a58 	.word	0x08006a58
 80056d4:	08006a58 	.word	0x08006a58
 80056d8:	08006a58 	.word	0x08006a58
 80056dc:	08006a5c 	.word	0x08006a5c

080056e0 <cos>:
 80056e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056e2:	ec53 2b10 	vmov	r2, r3, d0
 80056e6:	4826      	ldr	r0, [pc, #152]	; (8005780 <cos+0xa0>)
 80056e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056ec:	4281      	cmp	r1, r0
 80056ee:	dc06      	bgt.n	80056fe <cos+0x1e>
 80056f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005778 <cos+0x98>
 80056f4:	b005      	add	sp, #20
 80056f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80056fa:	f000 b8c1 	b.w	8005880 <__kernel_cos>
 80056fe:	4821      	ldr	r0, [pc, #132]	; (8005784 <cos+0xa4>)
 8005700:	4281      	cmp	r1, r0
 8005702:	dd09      	ble.n	8005718 <cos+0x38>
 8005704:	ee10 0a10 	vmov	r0, s0
 8005708:	4619      	mov	r1, r3
 800570a:	f7fa fd81 	bl	8000210 <__aeabi_dsub>
 800570e:	ec41 0b10 	vmov	d0, r0, r1
 8005712:	b005      	add	sp, #20
 8005714:	f85d fb04 	ldr.w	pc, [sp], #4
 8005718:	4668      	mov	r0, sp
 800571a:	f000 fa39 	bl	8005b90 <__ieee754_rem_pio2>
 800571e:	f000 0003 	and.w	r0, r0, #3
 8005722:	2801      	cmp	r0, #1
 8005724:	d00b      	beq.n	800573e <cos+0x5e>
 8005726:	2802      	cmp	r0, #2
 8005728:	d016      	beq.n	8005758 <cos+0x78>
 800572a:	b9e0      	cbnz	r0, 8005766 <cos+0x86>
 800572c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005730:	ed9d 0b00 	vldr	d0, [sp]
 8005734:	f000 f8a4 	bl	8005880 <__kernel_cos>
 8005738:	ec51 0b10 	vmov	r0, r1, d0
 800573c:	e7e7      	b.n	800570e <cos+0x2e>
 800573e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005742:	ed9d 0b00 	vldr	d0, [sp]
 8005746:	f000 f963 	bl	8005a10 <__kernel_sin>
 800574a:	ec53 2b10 	vmov	r2, r3, d0
 800574e:	ee10 0a10 	vmov	r0, s0
 8005752:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005756:	e7da      	b.n	800570e <cos+0x2e>
 8005758:	ed9d 1b02 	vldr	d1, [sp, #8]
 800575c:	ed9d 0b00 	vldr	d0, [sp]
 8005760:	f000 f88e 	bl	8005880 <__kernel_cos>
 8005764:	e7f1      	b.n	800574a <cos+0x6a>
 8005766:	ed9d 1b02 	vldr	d1, [sp, #8]
 800576a:	ed9d 0b00 	vldr	d0, [sp]
 800576e:	2001      	movs	r0, #1
 8005770:	f000 f94e 	bl	8005a10 <__kernel_sin>
 8005774:	e7e0      	b.n	8005738 <cos+0x58>
 8005776:	bf00      	nop
	...
 8005780:	3fe921fb 	.word	0x3fe921fb
 8005784:	7fefffff 	.word	0x7fefffff

08005788 <sin>:
 8005788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800578a:	ec53 2b10 	vmov	r2, r3, d0
 800578e:	4828      	ldr	r0, [pc, #160]	; (8005830 <sin+0xa8>)
 8005790:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005794:	4281      	cmp	r1, r0
 8005796:	dc07      	bgt.n	80057a8 <sin+0x20>
 8005798:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005828 <sin+0xa0>
 800579c:	2000      	movs	r0, #0
 800579e:	b005      	add	sp, #20
 80057a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057a4:	f000 b934 	b.w	8005a10 <__kernel_sin>
 80057a8:	4822      	ldr	r0, [pc, #136]	; (8005834 <sin+0xac>)
 80057aa:	4281      	cmp	r1, r0
 80057ac:	dd09      	ble.n	80057c2 <sin+0x3a>
 80057ae:	ee10 0a10 	vmov	r0, s0
 80057b2:	4619      	mov	r1, r3
 80057b4:	f7fa fd2c 	bl	8000210 <__aeabi_dsub>
 80057b8:	ec41 0b10 	vmov	d0, r0, r1
 80057bc:	b005      	add	sp, #20
 80057be:	f85d fb04 	ldr.w	pc, [sp], #4
 80057c2:	4668      	mov	r0, sp
 80057c4:	f000 f9e4 	bl	8005b90 <__ieee754_rem_pio2>
 80057c8:	f000 0003 	and.w	r0, r0, #3
 80057cc:	2801      	cmp	r0, #1
 80057ce:	d00c      	beq.n	80057ea <sin+0x62>
 80057d0:	2802      	cmp	r0, #2
 80057d2:	d011      	beq.n	80057f8 <sin+0x70>
 80057d4:	b9f0      	cbnz	r0, 8005814 <sin+0x8c>
 80057d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80057da:	ed9d 0b00 	vldr	d0, [sp]
 80057de:	2001      	movs	r0, #1
 80057e0:	f000 f916 	bl	8005a10 <__kernel_sin>
 80057e4:	ec51 0b10 	vmov	r0, r1, d0
 80057e8:	e7e6      	b.n	80057b8 <sin+0x30>
 80057ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80057ee:	ed9d 0b00 	vldr	d0, [sp]
 80057f2:	f000 f845 	bl	8005880 <__kernel_cos>
 80057f6:	e7f5      	b.n	80057e4 <sin+0x5c>
 80057f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80057fc:	ed9d 0b00 	vldr	d0, [sp]
 8005800:	2001      	movs	r0, #1
 8005802:	f000 f905 	bl	8005a10 <__kernel_sin>
 8005806:	ec53 2b10 	vmov	r2, r3, d0
 800580a:	ee10 0a10 	vmov	r0, s0
 800580e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005812:	e7d1      	b.n	80057b8 <sin+0x30>
 8005814:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005818:	ed9d 0b00 	vldr	d0, [sp]
 800581c:	f000 f830 	bl	8005880 <__kernel_cos>
 8005820:	e7f1      	b.n	8005806 <sin+0x7e>
 8005822:	bf00      	nop
 8005824:	f3af 8000 	nop.w
	...
 8005830:	3fe921fb 	.word	0x3fe921fb
 8005834:	7fefffff 	.word	0x7fefffff

08005838 <sqrtf>:
 8005838:	b508      	push	{r3, lr}
 800583a:	ed2d 8b02 	vpush	{d8}
 800583e:	eeb0 8a40 	vmov.f32	s16, s0
 8005842:	f000 f817 	bl	8005874 <__ieee754_sqrtf>
 8005846:	eeb4 8a48 	vcmp.f32	s16, s16
 800584a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584e:	d60c      	bvs.n	800586a <sqrtf+0x32>
 8005850:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005870 <sqrtf+0x38>
 8005854:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585c:	d505      	bpl.n	800586a <sqrtf+0x32>
 800585e:	f7ff ff15 	bl	800568c <__errno>
 8005862:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005866:	2321      	movs	r3, #33	; 0x21
 8005868:	6003      	str	r3, [r0, #0]
 800586a:	ecbd 8b02 	vpop	{d8}
 800586e:	bd08      	pop	{r3, pc}
 8005870:	00000000 	.word	0x00000000

08005874 <__ieee754_sqrtf>:
 8005874:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005878:	4770      	bx	lr
 800587a:	0000      	movs	r0, r0
 800587c:	0000      	movs	r0, r0
	...

08005880 <__kernel_cos>:
 8005880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005884:	ec57 6b10 	vmov	r6, r7, d0
 8005888:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800588c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005890:	ed8d 1b00 	vstr	d1, [sp]
 8005894:	da07      	bge.n	80058a6 <__kernel_cos+0x26>
 8005896:	ee10 0a10 	vmov	r0, s0
 800589a:	4639      	mov	r1, r7
 800589c:	f7fb f90a 	bl	8000ab4 <__aeabi_d2iz>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	f000 8088 	beq.w	80059b6 <__kernel_cos+0x136>
 80058a6:	4632      	mov	r2, r6
 80058a8:	463b      	mov	r3, r7
 80058aa:	4630      	mov	r0, r6
 80058ac:	4639      	mov	r1, r7
 80058ae:	f7fa fe67 	bl	8000580 <__aeabi_dmul>
 80058b2:	4b51      	ldr	r3, [pc, #324]	; (80059f8 <__kernel_cos+0x178>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	4604      	mov	r4, r0
 80058b8:	460d      	mov	r5, r1
 80058ba:	f7fa fe61 	bl	8000580 <__aeabi_dmul>
 80058be:	a340      	add	r3, pc, #256	; (adr r3, 80059c0 <__kernel_cos+0x140>)
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	4682      	mov	sl, r0
 80058c6:	468b      	mov	fp, r1
 80058c8:	4620      	mov	r0, r4
 80058ca:	4629      	mov	r1, r5
 80058cc:	f7fa fe58 	bl	8000580 <__aeabi_dmul>
 80058d0:	a33d      	add	r3, pc, #244	; (adr r3, 80059c8 <__kernel_cos+0x148>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fc9d 	bl	8000214 <__adddf3>
 80058da:	4622      	mov	r2, r4
 80058dc:	462b      	mov	r3, r5
 80058de:	f7fa fe4f 	bl	8000580 <__aeabi_dmul>
 80058e2:	a33b      	add	r3, pc, #236	; (adr r3, 80059d0 <__kernel_cos+0x150>)
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f7fa fc92 	bl	8000210 <__aeabi_dsub>
 80058ec:	4622      	mov	r2, r4
 80058ee:	462b      	mov	r3, r5
 80058f0:	f7fa fe46 	bl	8000580 <__aeabi_dmul>
 80058f4:	a338      	add	r3, pc, #224	; (adr r3, 80059d8 <__kernel_cos+0x158>)
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f7fa fc8b 	bl	8000214 <__adddf3>
 80058fe:	4622      	mov	r2, r4
 8005900:	462b      	mov	r3, r5
 8005902:	f7fa fe3d 	bl	8000580 <__aeabi_dmul>
 8005906:	a336      	add	r3, pc, #216	; (adr r3, 80059e0 <__kernel_cos+0x160>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fc80 	bl	8000210 <__aeabi_dsub>
 8005910:	4622      	mov	r2, r4
 8005912:	462b      	mov	r3, r5
 8005914:	f7fa fe34 	bl	8000580 <__aeabi_dmul>
 8005918:	a333      	add	r3, pc, #204	; (adr r3, 80059e8 <__kernel_cos+0x168>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fc79 	bl	8000214 <__adddf3>
 8005922:	4622      	mov	r2, r4
 8005924:	462b      	mov	r3, r5
 8005926:	f7fa fe2b 	bl	8000580 <__aeabi_dmul>
 800592a:	4622      	mov	r2, r4
 800592c:	462b      	mov	r3, r5
 800592e:	f7fa fe27 	bl	8000580 <__aeabi_dmul>
 8005932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005936:	4604      	mov	r4, r0
 8005938:	460d      	mov	r5, r1
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	f7fa fe1f 	bl	8000580 <__aeabi_dmul>
 8005942:	460b      	mov	r3, r1
 8005944:	4602      	mov	r2, r0
 8005946:	4629      	mov	r1, r5
 8005948:	4620      	mov	r0, r4
 800594a:	f7fa fc61 	bl	8000210 <__aeabi_dsub>
 800594e:	4b2b      	ldr	r3, [pc, #172]	; (80059fc <__kernel_cos+0x17c>)
 8005950:	4598      	cmp	r8, r3
 8005952:	4606      	mov	r6, r0
 8005954:	460f      	mov	r7, r1
 8005956:	dc10      	bgt.n	800597a <__kernel_cos+0xfa>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4650      	mov	r0, sl
 800595e:	4659      	mov	r1, fp
 8005960:	f7fa fc56 	bl	8000210 <__aeabi_dsub>
 8005964:	460b      	mov	r3, r1
 8005966:	4926      	ldr	r1, [pc, #152]	; (8005a00 <__kernel_cos+0x180>)
 8005968:	4602      	mov	r2, r0
 800596a:	2000      	movs	r0, #0
 800596c:	f7fa fc50 	bl	8000210 <__aeabi_dsub>
 8005970:	ec41 0b10 	vmov	d0, r0, r1
 8005974:	b003      	add	sp, #12
 8005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597a:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <__kernel_cos+0x184>)
 800597c:	4920      	ldr	r1, [pc, #128]	; (8005a00 <__kernel_cos+0x180>)
 800597e:	4598      	cmp	r8, r3
 8005980:	bfcc      	ite	gt
 8005982:	4d21      	ldrgt	r5, [pc, #132]	; (8005a08 <__kernel_cos+0x188>)
 8005984:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005988:	2400      	movs	r4, #0
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	2000      	movs	r0, #0
 8005990:	f7fa fc3e 	bl	8000210 <__aeabi_dsub>
 8005994:	4622      	mov	r2, r4
 8005996:	4680      	mov	r8, r0
 8005998:	4689      	mov	r9, r1
 800599a:	462b      	mov	r3, r5
 800599c:	4650      	mov	r0, sl
 800599e:	4659      	mov	r1, fp
 80059a0:	f7fa fc36 	bl	8000210 <__aeabi_dsub>
 80059a4:	4632      	mov	r2, r6
 80059a6:	463b      	mov	r3, r7
 80059a8:	f7fa fc32 	bl	8000210 <__aeabi_dsub>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4640      	mov	r0, r8
 80059b2:	4649      	mov	r1, r9
 80059b4:	e7da      	b.n	800596c <__kernel_cos+0xec>
 80059b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80059f0 <__kernel_cos+0x170>
 80059ba:	e7db      	b.n	8005974 <__kernel_cos+0xf4>
 80059bc:	f3af 8000 	nop.w
 80059c0:	be8838d4 	.word	0xbe8838d4
 80059c4:	bda8fae9 	.word	0xbda8fae9
 80059c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80059cc:	3e21ee9e 	.word	0x3e21ee9e
 80059d0:	809c52ad 	.word	0x809c52ad
 80059d4:	3e927e4f 	.word	0x3e927e4f
 80059d8:	19cb1590 	.word	0x19cb1590
 80059dc:	3efa01a0 	.word	0x3efa01a0
 80059e0:	16c15177 	.word	0x16c15177
 80059e4:	3f56c16c 	.word	0x3f56c16c
 80059e8:	5555554c 	.word	0x5555554c
 80059ec:	3fa55555 	.word	0x3fa55555
 80059f0:	00000000 	.word	0x00000000
 80059f4:	3ff00000 	.word	0x3ff00000
 80059f8:	3fe00000 	.word	0x3fe00000
 80059fc:	3fd33332 	.word	0x3fd33332
 8005a00:	3ff00000 	.word	0x3ff00000
 8005a04:	3fe90000 	.word	0x3fe90000
 8005a08:	3fd20000 	.word	0x3fd20000
 8005a0c:	00000000 	.word	0x00000000

08005a10 <__kernel_sin>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	ed2d 8b04 	vpush	{d8-d9}
 8005a18:	eeb0 8a41 	vmov.f32	s16, s2
 8005a1c:	eef0 8a61 	vmov.f32	s17, s3
 8005a20:	ec55 4b10 	vmov	r4, r5, d0
 8005a24:	b083      	sub	sp, #12
 8005a26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005a2e:	9001      	str	r0, [sp, #4]
 8005a30:	da06      	bge.n	8005a40 <__kernel_sin+0x30>
 8005a32:	ee10 0a10 	vmov	r0, s0
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7fb f83c 	bl	8000ab4 <__aeabi_d2iz>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d051      	beq.n	8005ae4 <__kernel_sin+0xd4>
 8005a40:	4622      	mov	r2, r4
 8005a42:	462b      	mov	r3, r5
 8005a44:	4620      	mov	r0, r4
 8005a46:	4629      	mov	r1, r5
 8005a48:	f7fa fd9a 	bl	8000580 <__aeabi_dmul>
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	468b      	mov	fp, r1
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4620      	mov	r0, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	f7fa fd92 	bl	8000580 <__aeabi_dmul>
 8005a5c:	a341      	add	r3, pc, #260	; (adr r3, 8005b64 <__kernel_sin+0x154>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	4680      	mov	r8, r0
 8005a64:	4689      	mov	r9, r1
 8005a66:	4650      	mov	r0, sl
 8005a68:	4659      	mov	r1, fp
 8005a6a:	f7fa fd89 	bl	8000580 <__aeabi_dmul>
 8005a6e:	a33f      	add	r3, pc, #252	; (adr r3, 8005b6c <__kernel_sin+0x15c>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f7fa fbcc 	bl	8000210 <__aeabi_dsub>
 8005a78:	4652      	mov	r2, sl
 8005a7a:	465b      	mov	r3, fp
 8005a7c:	f7fa fd80 	bl	8000580 <__aeabi_dmul>
 8005a80:	a33c      	add	r3, pc, #240	; (adr r3, 8005b74 <__kernel_sin+0x164>)
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f7fa fbc5 	bl	8000214 <__adddf3>
 8005a8a:	4652      	mov	r2, sl
 8005a8c:	465b      	mov	r3, fp
 8005a8e:	f7fa fd77 	bl	8000580 <__aeabi_dmul>
 8005a92:	a33a      	add	r3, pc, #232	; (adr r3, 8005b7c <__kernel_sin+0x16c>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f7fa fbba 	bl	8000210 <__aeabi_dsub>
 8005a9c:	4652      	mov	r2, sl
 8005a9e:	465b      	mov	r3, fp
 8005aa0:	f7fa fd6e 	bl	8000580 <__aeabi_dmul>
 8005aa4:	a337      	add	r3, pc, #220	; (adr r3, 8005b84 <__kernel_sin+0x174>)
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f7fa fbb3 	bl	8000214 <__adddf3>
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	460f      	mov	r7, r1
 8005ab4:	b9eb      	cbnz	r3, 8005af2 <__kernel_sin+0xe2>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4650      	mov	r0, sl
 8005abc:	4659      	mov	r1, fp
 8005abe:	f7fa fd5f 	bl	8000580 <__aeabi_dmul>
 8005ac2:	a325      	add	r3, pc, #148	; (adr r3, 8005b58 <__kernel_sin+0x148>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fa fba2 	bl	8000210 <__aeabi_dsub>
 8005acc:	4642      	mov	r2, r8
 8005ace:	464b      	mov	r3, r9
 8005ad0:	f7fa fd56 	bl	8000580 <__aeabi_dmul>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4620      	mov	r0, r4
 8005ada:	4629      	mov	r1, r5
 8005adc:	f7fa fb9a 	bl	8000214 <__adddf3>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	460d      	mov	r5, r1
 8005ae4:	ec45 4b10 	vmov	d0, r4, r5
 8005ae8:	b003      	add	sp, #12
 8005aea:	ecbd 8b04 	vpop	{d8-d9}
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af2:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <__kernel_sin+0x150>)
 8005af4:	ec51 0b18 	vmov	r0, r1, d8
 8005af8:	2200      	movs	r2, #0
 8005afa:	f7fa fd41 	bl	8000580 <__aeabi_dmul>
 8005afe:	4632      	mov	r2, r6
 8005b00:	ec41 0b19 	vmov	d9, r0, r1
 8005b04:	463b      	mov	r3, r7
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa fd39 	bl	8000580 <__aeabi_dmul>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	ec51 0b19 	vmov	r0, r1, d9
 8005b16:	f7fa fb7b 	bl	8000210 <__aeabi_dsub>
 8005b1a:	4652      	mov	r2, sl
 8005b1c:	465b      	mov	r3, fp
 8005b1e:	f7fa fd2f 	bl	8000580 <__aeabi_dmul>
 8005b22:	ec53 2b18 	vmov	r2, r3, d8
 8005b26:	f7fa fb73 	bl	8000210 <__aeabi_dsub>
 8005b2a:	a30b      	add	r3, pc, #44	; (adr r3, 8005b58 <__kernel_sin+0x148>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	4606      	mov	r6, r0
 8005b32:	460f      	mov	r7, r1
 8005b34:	4640      	mov	r0, r8
 8005b36:	4649      	mov	r1, r9
 8005b38:	f7fa fd22 	bl	8000580 <__aeabi_dmul>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4630      	mov	r0, r6
 8005b42:	4639      	mov	r1, r7
 8005b44:	f7fa fb66 	bl	8000214 <__adddf3>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4629      	mov	r1, r5
 8005b50:	f7fa fb5e 	bl	8000210 <__aeabi_dsub>
 8005b54:	e7c4      	b.n	8005ae0 <__kernel_sin+0xd0>
 8005b56:	bf00      	nop
 8005b58:	55555549 	.word	0x55555549
 8005b5c:	3fc55555 	.word	0x3fc55555
 8005b60:	3fe00000 	.word	0x3fe00000
 8005b64:	5acfd57c 	.word	0x5acfd57c
 8005b68:	3de5d93a 	.word	0x3de5d93a
 8005b6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005b70:	3e5ae5e6 	.word	0x3e5ae5e6
 8005b74:	57b1fe7d 	.word	0x57b1fe7d
 8005b78:	3ec71de3 	.word	0x3ec71de3
 8005b7c:	19c161d5 	.word	0x19c161d5
 8005b80:	3f2a01a0 	.word	0x3f2a01a0
 8005b84:	1110f8a6 	.word	0x1110f8a6
 8005b88:	3f811111 	.word	0x3f811111
 8005b8c:	00000000 	.word	0x00000000

08005b90 <__ieee754_rem_pio2>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	ed2d 8b02 	vpush	{d8}
 8005b98:	ec55 4b10 	vmov	r4, r5, d0
 8005b9c:	4bca      	ldr	r3, [pc, #808]	; (8005ec8 <__ieee754_rem_pio2+0x338>)
 8005b9e:	b08b      	sub	sp, #44	; 0x2c
 8005ba0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005ba4:	4598      	cmp	r8, r3
 8005ba6:	4682      	mov	sl, r0
 8005ba8:	9502      	str	r5, [sp, #8]
 8005baa:	dc08      	bgt.n	8005bbe <__ieee754_rem_pio2+0x2e>
 8005bac:	2200      	movs	r2, #0
 8005bae:	2300      	movs	r3, #0
 8005bb0:	ed80 0b00 	vstr	d0, [r0]
 8005bb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005bb8:	f04f 0b00 	mov.w	fp, #0
 8005bbc:	e028      	b.n	8005c10 <__ieee754_rem_pio2+0x80>
 8005bbe:	4bc3      	ldr	r3, [pc, #780]	; (8005ecc <__ieee754_rem_pio2+0x33c>)
 8005bc0:	4598      	cmp	r8, r3
 8005bc2:	dc78      	bgt.n	8005cb6 <__ieee754_rem_pio2+0x126>
 8005bc4:	9b02      	ldr	r3, [sp, #8]
 8005bc6:	4ec2      	ldr	r6, [pc, #776]	; (8005ed0 <__ieee754_rem_pio2+0x340>)
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	ee10 0a10 	vmov	r0, s0
 8005bce:	a3b0      	add	r3, pc, #704	; (adr r3, 8005e90 <__ieee754_rem_pio2+0x300>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	dd39      	ble.n	8005c4c <__ieee754_rem_pio2+0xbc>
 8005bd8:	f7fa fb1a 	bl	8000210 <__aeabi_dsub>
 8005bdc:	45b0      	cmp	r8, r6
 8005bde:	4604      	mov	r4, r0
 8005be0:	460d      	mov	r5, r1
 8005be2:	d01b      	beq.n	8005c1c <__ieee754_rem_pio2+0x8c>
 8005be4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x308>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fb11 	bl	8000210 <__aeabi_dsub>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	e9ca 2300 	strd	r2, r3, [sl]
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f7fa fb09 	bl	8000210 <__aeabi_dsub>
 8005bfe:	a3a6      	add	r3, pc, #664	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x308>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f7fa fb04 	bl	8000210 <__aeabi_dsub>
 8005c08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c0c:	f04f 0b01 	mov.w	fp, #1
 8005c10:	4658      	mov	r0, fp
 8005c12:	b00b      	add	sp, #44	; 0x2c
 8005c14:	ecbd 8b02 	vpop	{d8}
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005ea0 <__ieee754_rem_pio2+0x310>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f7fa faf5 	bl	8000210 <__aeabi_dsub>
 8005c26:	a3a0      	add	r3, pc, #640	; (adr r3, 8005ea8 <__ieee754_rem_pio2+0x318>)
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	460d      	mov	r5, r1
 8005c30:	f7fa faee 	bl	8000210 <__aeabi_dsub>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	e9ca 2300 	strd	r2, r3, [sl]
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa fae6 	bl	8000210 <__aeabi_dsub>
 8005c44:	a398      	add	r3, pc, #608	; (adr r3, 8005ea8 <__ieee754_rem_pio2+0x318>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	e7db      	b.n	8005c04 <__ieee754_rem_pio2+0x74>
 8005c4c:	f7fa fae2 	bl	8000214 <__adddf3>
 8005c50:	45b0      	cmp	r8, r6
 8005c52:	4604      	mov	r4, r0
 8005c54:	460d      	mov	r5, r1
 8005c56:	d016      	beq.n	8005c86 <__ieee754_rem_pio2+0xf6>
 8005c58:	a38f      	add	r3, pc, #572	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x308>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f7fa fad9 	bl	8000214 <__adddf3>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	e9ca 2300 	strd	r2, r3, [sl]
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7fa facf 	bl	8000210 <__aeabi_dsub>
 8005c72:	a389      	add	r3, pc, #548	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x308>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f7fa facc 	bl	8000214 <__adddf3>
 8005c7c:	f04f 3bff 	mov.w	fp, #4294967295
 8005c80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c84:	e7c4      	b.n	8005c10 <__ieee754_rem_pio2+0x80>
 8005c86:	a386      	add	r3, pc, #536	; (adr r3, 8005ea0 <__ieee754_rem_pio2+0x310>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f7fa fac2 	bl	8000214 <__adddf3>
 8005c90:	a385      	add	r3, pc, #532	; (adr r3, 8005ea8 <__ieee754_rem_pio2+0x318>)
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	4604      	mov	r4, r0
 8005c98:	460d      	mov	r5, r1
 8005c9a:	f7fa fabb 	bl	8000214 <__adddf3>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	e9ca 2300 	strd	r2, r3, [sl]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa fab1 	bl	8000210 <__aeabi_dsub>
 8005cae:	a37e      	add	r3, pc, #504	; (adr r3, 8005ea8 <__ieee754_rem_pio2+0x318>)
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	e7e0      	b.n	8005c78 <__ieee754_rem_pio2+0xe8>
 8005cb6:	4b87      	ldr	r3, [pc, #540]	; (8005ed4 <__ieee754_rem_pio2+0x344>)
 8005cb8:	4598      	cmp	r8, r3
 8005cba:	f300 80d8 	bgt.w	8005e6e <__ieee754_rem_pio2+0x2de>
 8005cbe:	f000 f96d 	bl	8005f9c <fabs>
 8005cc2:	ec55 4b10 	vmov	r4, r5, d0
 8005cc6:	ee10 0a10 	vmov	r0, s0
 8005cca:	a379      	add	r3, pc, #484	; (adr r3, 8005eb0 <__ieee754_rem_pio2+0x320>)
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7fa fc55 	bl	8000580 <__aeabi_dmul>
 8005cd6:	4b80      	ldr	r3, [pc, #512]	; (8005ed8 <__ieee754_rem_pio2+0x348>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f7fa fa9b 	bl	8000214 <__adddf3>
 8005cde:	f7fa fee9 	bl	8000ab4 <__aeabi_d2iz>
 8005ce2:	4683      	mov	fp, r0
 8005ce4:	f7fa fbe2 	bl	80004ac <__aeabi_i2d>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	ec43 2b18 	vmov	d8, r2, r3
 8005cf0:	a367      	add	r3, pc, #412	; (adr r3, 8005e90 <__ieee754_rem_pio2+0x300>)
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f7fa fc43 	bl	8000580 <__aeabi_dmul>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	f7fa fa85 	bl	8000210 <__aeabi_dsub>
 8005d06:	a364      	add	r3, pc, #400	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x308>)
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	460f      	mov	r7, r1
 8005d10:	ec51 0b18 	vmov	r0, r1, d8
 8005d14:	f7fa fc34 	bl	8000580 <__aeabi_dmul>
 8005d18:	f1bb 0f1f 	cmp.w	fp, #31
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	460d      	mov	r5, r1
 8005d20:	dc0d      	bgt.n	8005d3e <__ieee754_rem_pio2+0x1ae>
 8005d22:	4b6e      	ldr	r3, [pc, #440]	; (8005edc <__ieee754_rem_pio2+0x34c>)
 8005d24:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2c:	4543      	cmp	r3, r8
 8005d2e:	d006      	beq.n	8005d3e <__ieee754_rem_pio2+0x1ae>
 8005d30:	4622      	mov	r2, r4
 8005d32:	462b      	mov	r3, r5
 8005d34:	4630      	mov	r0, r6
 8005d36:	4639      	mov	r1, r7
 8005d38:	f7fa fa6a 	bl	8000210 <__aeabi_dsub>
 8005d3c:	e00e      	b.n	8005d5c <__ieee754_rem_pio2+0x1cc>
 8005d3e:	462b      	mov	r3, r5
 8005d40:	4622      	mov	r2, r4
 8005d42:	4630      	mov	r0, r6
 8005d44:	4639      	mov	r1, r7
 8005d46:	f7fa fa63 	bl	8000210 <__aeabi_dsub>
 8005d4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d54:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	dc02      	bgt.n	8005d62 <__ieee754_rem_pio2+0x1d2>
 8005d5c:	e9ca 0100 	strd	r0, r1, [sl]
 8005d60:	e039      	b.n	8005dd6 <__ieee754_rem_pio2+0x246>
 8005d62:	a34f      	add	r3, pc, #316	; (adr r3, 8005ea0 <__ieee754_rem_pio2+0x310>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	ec51 0b18 	vmov	r0, r1, d8
 8005d6c:	f7fa fc08 	bl	8000580 <__aeabi_dmul>
 8005d70:	4604      	mov	r4, r0
 8005d72:	460d      	mov	r5, r1
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa fa48 	bl	8000210 <__aeabi_dsub>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4680      	mov	r8, r0
 8005d86:	4689      	mov	r9, r1
 8005d88:	4630      	mov	r0, r6
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	f7fa fa40 	bl	8000210 <__aeabi_dsub>
 8005d90:	4622      	mov	r2, r4
 8005d92:	462b      	mov	r3, r5
 8005d94:	f7fa fa3c 	bl	8000210 <__aeabi_dsub>
 8005d98:	a343      	add	r3, pc, #268	; (adr r3, 8005ea8 <__ieee754_rem_pio2+0x318>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	4604      	mov	r4, r0
 8005da0:	460d      	mov	r5, r1
 8005da2:	ec51 0b18 	vmov	r0, r1, d8
 8005da6:	f7fa fbeb 	bl	8000580 <__aeabi_dmul>
 8005daa:	4622      	mov	r2, r4
 8005dac:	462b      	mov	r3, r5
 8005dae:	f7fa fa2f 	bl	8000210 <__aeabi_dsub>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4604      	mov	r4, r0
 8005db8:	460d      	mov	r5, r1
 8005dba:	4640      	mov	r0, r8
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	f7fa fa27 	bl	8000210 <__aeabi_dsub>
 8005dc2:	9a03      	ldr	r2, [sp, #12]
 8005dc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b31      	cmp	r3, #49	; 0x31
 8005dcc:	dc24      	bgt.n	8005e18 <__ieee754_rem_pio2+0x288>
 8005dce:	e9ca 0100 	strd	r0, r1, [sl]
 8005dd2:	4646      	mov	r6, r8
 8005dd4:	464f      	mov	r7, r9
 8005dd6:	e9da 8900 	ldrd	r8, r9, [sl]
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4642      	mov	r2, r8
 8005dde:	464b      	mov	r3, r9
 8005de0:	4639      	mov	r1, r7
 8005de2:	f7fa fa15 	bl	8000210 <__aeabi_dsub>
 8005de6:	462b      	mov	r3, r5
 8005de8:	4622      	mov	r2, r4
 8005dea:	f7fa fa11 	bl	8000210 <__aeabi_dsub>
 8005dee:	9b02      	ldr	r3, [sp, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005df6:	f6bf af0b 	bge.w	8005c10 <__ieee754_rem_pio2+0x80>
 8005dfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005dfe:	f8ca 3004 	str.w	r3, [sl, #4]
 8005e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e06:	f8ca 8000 	str.w	r8, [sl]
 8005e0a:	f8ca 0008 	str.w	r0, [sl, #8]
 8005e0e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005e12:	f1cb 0b00 	rsb	fp, fp, #0
 8005e16:	e6fb      	b.n	8005c10 <__ieee754_rem_pio2+0x80>
 8005e18:	a327      	add	r3, pc, #156	; (adr r3, 8005eb8 <__ieee754_rem_pio2+0x328>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	ec51 0b18 	vmov	r0, r1, d8
 8005e22:	f7fa fbad 	bl	8000580 <__aeabi_dmul>
 8005e26:	4604      	mov	r4, r0
 8005e28:	460d      	mov	r5, r1
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4640      	mov	r0, r8
 8005e30:	4649      	mov	r1, r9
 8005e32:	f7fa f9ed 	bl	8000210 <__aeabi_dsub>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	460f      	mov	r7, r1
 8005e3e:	4640      	mov	r0, r8
 8005e40:	4649      	mov	r1, r9
 8005e42:	f7fa f9e5 	bl	8000210 <__aeabi_dsub>
 8005e46:	4622      	mov	r2, r4
 8005e48:	462b      	mov	r3, r5
 8005e4a:	f7fa f9e1 	bl	8000210 <__aeabi_dsub>
 8005e4e:	a31c      	add	r3, pc, #112	; (adr r3, 8005ec0 <__ieee754_rem_pio2+0x330>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	4604      	mov	r4, r0
 8005e56:	460d      	mov	r5, r1
 8005e58:	ec51 0b18 	vmov	r0, r1, d8
 8005e5c:	f7fa fb90 	bl	8000580 <__aeabi_dmul>
 8005e60:	4622      	mov	r2, r4
 8005e62:	462b      	mov	r3, r5
 8005e64:	f7fa f9d4 	bl	8000210 <__aeabi_dsub>
 8005e68:	4604      	mov	r4, r0
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	e760      	b.n	8005d30 <__ieee754_rem_pio2+0x1a0>
 8005e6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ee0 <__ieee754_rem_pio2+0x350>)
 8005e70:	4598      	cmp	r8, r3
 8005e72:	dd37      	ble.n	8005ee4 <__ieee754_rem_pio2+0x354>
 8005e74:	ee10 2a10 	vmov	r2, s0
 8005e78:	462b      	mov	r3, r5
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa f9c7 	bl	8000210 <__aeabi_dsub>
 8005e82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e86:	e9ca 0100 	strd	r0, r1, [sl]
 8005e8a:	e695      	b.n	8005bb8 <__ieee754_rem_pio2+0x28>
 8005e8c:	f3af 8000 	nop.w
 8005e90:	54400000 	.word	0x54400000
 8005e94:	3ff921fb 	.word	0x3ff921fb
 8005e98:	1a626331 	.word	0x1a626331
 8005e9c:	3dd0b461 	.word	0x3dd0b461
 8005ea0:	1a600000 	.word	0x1a600000
 8005ea4:	3dd0b461 	.word	0x3dd0b461
 8005ea8:	2e037073 	.word	0x2e037073
 8005eac:	3ba3198a 	.word	0x3ba3198a
 8005eb0:	6dc9c883 	.word	0x6dc9c883
 8005eb4:	3fe45f30 	.word	0x3fe45f30
 8005eb8:	2e000000 	.word	0x2e000000
 8005ebc:	3ba3198a 	.word	0x3ba3198a
 8005ec0:	252049c1 	.word	0x252049c1
 8005ec4:	397b839a 	.word	0x397b839a
 8005ec8:	3fe921fb 	.word	0x3fe921fb
 8005ecc:	4002d97b 	.word	0x4002d97b
 8005ed0:	3ff921fb 	.word	0x3ff921fb
 8005ed4:	413921fb 	.word	0x413921fb
 8005ed8:	3fe00000 	.word	0x3fe00000
 8005edc:	08006878 	.word	0x08006878
 8005ee0:	7fefffff 	.word	0x7fefffff
 8005ee4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005ee8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005eec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	f7fa fdde 	bl	8000ab4 <__aeabi_d2iz>
 8005ef8:	f7fa fad8 	bl	80004ac <__aeabi_i2d>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4620      	mov	r0, r4
 8005f02:	4629      	mov	r1, r5
 8005f04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f08:	f7fa f982 	bl	8000210 <__aeabi_dsub>
 8005f0c:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <__ieee754_rem_pio2+0x404>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f7fa fb36 	bl	8000580 <__aeabi_dmul>
 8005f14:	460d      	mov	r5, r1
 8005f16:	4604      	mov	r4, r0
 8005f18:	f7fa fdcc 	bl	8000ab4 <__aeabi_d2iz>
 8005f1c:	f7fa fac6 	bl	80004ac <__aeabi_i2d>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4620      	mov	r0, r4
 8005f26:	4629      	mov	r1, r5
 8005f28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f2c:	f7fa f970 	bl	8000210 <__aeabi_dsub>
 8005f30:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <__ieee754_rem_pio2+0x404>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	f7fa fb24 	bl	8000580 <__aeabi_dmul>
 8005f38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f3c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005f40:	2703      	movs	r7, #3
 8005f42:	2400      	movs	r4, #0
 8005f44:	2500      	movs	r5, #0
 8005f46:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	46b9      	mov	r9, r7
 8005f50:	3f01      	subs	r7, #1
 8005f52:	f7fa fd7d 	bl	8000a50 <__aeabi_dcmpeq>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d1f5      	bne.n	8005f46 <__ieee754_rem_pio2+0x3b6>
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <__ieee754_rem_pio2+0x408>)
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	2302      	movs	r3, #2
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	4632      	mov	r2, r6
 8005f64:	464b      	mov	r3, r9
 8005f66:	4651      	mov	r1, sl
 8005f68:	a804      	add	r0, sp, #16
 8005f6a:	f000 f821 	bl	8005fb0 <__kernel_rem_pio2>
 8005f6e:	9b02      	ldr	r3, [sp, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	4683      	mov	fp, r0
 8005f74:	f6bf ae4c 	bge.w	8005c10 <__ieee754_rem_pio2+0x80>
 8005f78:	e9da 2100 	ldrd	r2, r1, [sl]
 8005f7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f80:	e9ca 2300 	strd	r2, r3, [sl]
 8005f84:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005f88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f8c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005f90:	e73f      	b.n	8005e12 <__ieee754_rem_pio2+0x282>
 8005f92:	bf00      	nop
 8005f94:	41700000 	.word	0x41700000
 8005f98:	080068f8 	.word	0x080068f8

08005f9c <fabs>:
 8005f9c:	ec51 0b10 	vmov	r0, r1, d0
 8005fa0:	ee10 2a10 	vmov	r2, s0
 8005fa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fa8:	ec43 2b10 	vmov	d0, r2, r3
 8005fac:	4770      	bx	lr
	...

08005fb0 <__kernel_rem_pio2>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	ed2d 8b02 	vpush	{d8}
 8005fb8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005fbc:	f112 0f14 	cmn.w	r2, #20
 8005fc0:	9306      	str	r3, [sp, #24]
 8005fc2:	9104      	str	r1, [sp, #16]
 8005fc4:	4bc2      	ldr	r3, [pc, #776]	; (80062d0 <__kernel_rem_pio2+0x320>)
 8005fc6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005fc8:	9009      	str	r0, [sp, #36]	; 0x24
 8005fca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	9b06      	ldr	r3, [sp, #24]
 8005fd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fd6:	bfa8      	it	ge
 8005fd8:	1ed4      	subge	r4, r2, #3
 8005fda:	9305      	str	r3, [sp, #20]
 8005fdc:	bfb2      	itee	lt
 8005fde:	2400      	movlt	r4, #0
 8005fe0:	2318      	movge	r3, #24
 8005fe2:	fb94 f4f3 	sdivge	r4, r4, r3
 8005fe6:	f06f 0317 	mvn.w	r3, #23
 8005fea:	fb04 3303 	mla	r3, r4, r3, r3
 8005fee:	eb03 0a02 	add.w	sl, r3, r2
 8005ff2:	9b00      	ldr	r3, [sp, #0]
 8005ff4:	9a05      	ldr	r2, [sp, #20]
 8005ff6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80062c0 <__kernel_rem_pio2+0x310>
 8005ffa:	eb03 0802 	add.w	r8, r3, r2
 8005ffe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006000:	1aa7      	subs	r7, r4, r2
 8006002:	ae20      	add	r6, sp, #128	; 0x80
 8006004:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006008:	2500      	movs	r5, #0
 800600a:	4545      	cmp	r5, r8
 800600c:	dd13      	ble.n	8006036 <__kernel_rem_pio2+0x86>
 800600e:	9b06      	ldr	r3, [sp, #24]
 8006010:	aa20      	add	r2, sp, #128	; 0x80
 8006012:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006016:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800601a:	f04f 0800 	mov.w	r8, #0
 800601e:	9b00      	ldr	r3, [sp, #0]
 8006020:	4598      	cmp	r8, r3
 8006022:	dc31      	bgt.n	8006088 <__kernel_rem_pio2+0xd8>
 8006024:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80062c0 <__kernel_rem_pio2+0x310>
 8006028:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800602c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006030:	462f      	mov	r7, r5
 8006032:	2600      	movs	r6, #0
 8006034:	e01b      	b.n	800606e <__kernel_rem_pio2+0xbe>
 8006036:	42ef      	cmn	r7, r5
 8006038:	d407      	bmi.n	800604a <__kernel_rem_pio2+0x9a>
 800603a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800603e:	f7fa fa35 	bl	80004ac <__aeabi_i2d>
 8006042:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006046:	3501      	adds	r5, #1
 8006048:	e7df      	b.n	800600a <__kernel_rem_pio2+0x5a>
 800604a:	ec51 0b18 	vmov	r0, r1, d8
 800604e:	e7f8      	b.n	8006042 <__kernel_rem_pio2+0x92>
 8006050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006054:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006058:	f7fa fa92 	bl	8000580 <__aeabi_dmul>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006064:	f7fa f8d6 	bl	8000214 <__adddf3>
 8006068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800606c:	3601      	adds	r6, #1
 800606e:	9b05      	ldr	r3, [sp, #20]
 8006070:	429e      	cmp	r6, r3
 8006072:	f1a7 0708 	sub.w	r7, r7, #8
 8006076:	ddeb      	ble.n	8006050 <__kernel_rem_pio2+0xa0>
 8006078:	ed9d 7b02 	vldr	d7, [sp, #8]
 800607c:	f108 0801 	add.w	r8, r8, #1
 8006080:	ecab 7b02 	vstmia	fp!, {d7}
 8006084:	3508      	adds	r5, #8
 8006086:	e7ca      	b.n	800601e <__kernel_rem_pio2+0x6e>
 8006088:	9b00      	ldr	r3, [sp, #0]
 800608a:	aa0c      	add	r2, sp, #48	; 0x30
 800608c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006094:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006098:	9c00      	ldr	r4, [sp, #0]
 800609a:	930a      	str	r3, [sp, #40]	; 0x28
 800609c:	00e3      	lsls	r3, r4, #3
 800609e:	9308      	str	r3, [sp, #32]
 80060a0:	ab98      	add	r3, sp, #608	; 0x260
 80060a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060a6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80060aa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80060ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80060b0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80060b4:	46c3      	mov	fp, r8
 80060b6:	46a1      	mov	r9, r4
 80060b8:	f1b9 0f00 	cmp.w	r9, #0
 80060bc:	f1a5 0508 	sub.w	r5, r5, #8
 80060c0:	dc77      	bgt.n	80061b2 <__kernel_rem_pio2+0x202>
 80060c2:	ec47 6b10 	vmov	d0, r6, r7
 80060c6:	4650      	mov	r0, sl
 80060c8:	f000 fac2 	bl	8006650 <scalbn>
 80060cc:	ec57 6b10 	vmov	r6, r7, d0
 80060d0:	2200      	movs	r2, #0
 80060d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80060d6:	ee10 0a10 	vmov	r0, s0
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fa50 	bl	8000580 <__aeabi_dmul>
 80060e0:	ec41 0b10 	vmov	d0, r0, r1
 80060e4:	f000 fb34 	bl	8006750 <floor>
 80060e8:	4b7a      	ldr	r3, [pc, #488]	; (80062d4 <__kernel_rem_pio2+0x324>)
 80060ea:	ec51 0b10 	vmov	r0, r1, d0
 80060ee:	2200      	movs	r2, #0
 80060f0:	f7fa fa46 	bl	8000580 <__aeabi_dmul>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4630      	mov	r0, r6
 80060fa:	4639      	mov	r1, r7
 80060fc:	f7fa f888 	bl	8000210 <__aeabi_dsub>
 8006100:	460f      	mov	r7, r1
 8006102:	4606      	mov	r6, r0
 8006104:	f7fa fcd6 	bl	8000ab4 <__aeabi_d2iz>
 8006108:	9002      	str	r0, [sp, #8]
 800610a:	f7fa f9cf 	bl	80004ac <__aeabi_i2d>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4630      	mov	r0, r6
 8006114:	4639      	mov	r1, r7
 8006116:	f7fa f87b 	bl	8000210 <__aeabi_dsub>
 800611a:	f1ba 0f00 	cmp.w	sl, #0
 800611e:	4606      	mov	r6, r0
 8006120:	460f      	mov	r7, r1
 8006122:	dd6d      	ble.n	8006200 <__kernel_rem_pio2+0x250>
 8006124:	1e61      	subs	r1, r4, #1
 8006126:	ab0c      	add	r3, sp, #48	; 0x30
 8006128:	9d02      	ldr	r5, [sp, #8]
 800612a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800612e:	f1ca 0018 	rsb	r0, sl, #24
 8006132:	fa43 f200 	asr.w	r2, r3, r0
 8006136:	4415      	add	r5, r2
 8006138:	4082      	lsls	r2, r0
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	aa0c      	add	r2, sp, #48	; 0x30
 800613e:	9502      	str	r5, [sp, #8]
 8006140:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006144:	f1ca 0217 	rsb	r2, sl, #23
 8006148:	fa43 fb02 	asr.w	fp, r3, r2
 800614c:	f1bb 0f00 	cmp.w	fp, #0
 8006150:	dd65      	ble.n	800621e <__kernel_rem_pio2+0x26e>
 8006152:	9b02      	ldr	r3, [sp, #8]
 8006154:	2200      	movs	r2, #0
 8006156:	3301      	adds	r3, #1
 8006158:	9302      	str	r3, [sp, #8]
 800615a:	4615      	mov	r5, r2
 800615c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006160:	4294      	cmp	r4, r2
 8006162:	f300 809f 	bgt.w	80062a4 <__kernel_rem_pio2+0x2f4>
 8006166:	f1ba 0f00 	cmp.w	sl, #0
 800616a:	dd07      	ble.n	800617c <__kernel_rem_pio2+0x1cc>
 800616c:	f1ba 0f01 	cmp.w	sl, #1
 8006170:	f000 80c1 	beq.w	80062f6 <__kernel_rem_pio2+0x346>
 8006174:	f1ba 0f02 	cmp.w	sl, #2
 8006178:	f000 80c7 	beq.w	800630a <__kernel_rem_pio2+0x35a>
 800617c:	f1bb 0f02 	cmp.w	fp, #2
 8006180:	d14d      	bne.n	800621e <__kernel_rem_pio2+0x26e>
 8006182:	4632      	mov	r2, r6
 8006184:	463b      	mov	r3, r7
 8006186:	4954      	ldr	r1, [pc, #336]	; (80062d8 <__kernel_rem_pio2+0x328>)
 8006188:	2000      	movs	r0, #0
 800618a:	f7fa f841 	bl	8000210 <__aeabi_dsub>
 800618e:	4606      	mov	r6, r0
 8006190:	460f      	mov	r7, r1
 8006192:	2d00      	cmp	r5, #0
 8006194:	d043      	beq.n	800621e <__kernel_rem_pio2+0x26e>
 8006196:	4650      	mov	r0, sl
 8006198:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80062c8 <__kernel_rem_pio2+0x318>
 800619c:	f000 fa58 	bl	8006650 <scalbn>
 80061a0:	4630      	mov	r0, r6
 80061a2:	4639      	mov	r1, r7
 80061a4:	ec53 2b10 	vmov	r2, r3, d0
 80061a8:	f7fa f832 	bl	8000210 <__aeabi_dsub>
 80061ac:	4606      	mov	r6, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	e035      	b.n	800621e <__kernel_rem_pio2+0x26e>
 80061b2:	4b4a      	ldr	r3, [pc, #296]	; (80062dc <__kernel_rem_pio2+0x32c>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	4630      	mov	r0, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	f7fa f9e1 	bl	8000580 <__aeabi_dmul>
 80061be:	f7fa fc79 	bl	8000ab4 <__aeabi_d2iz>
 80061c2:	f7fa f973 	bl	80004ac <__aeabi_i2d>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	ec43 2b18 	vmov	d8, r2, r3
 80061ce:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <__kernel_rem_pio2+0x330>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	f7fa f9d5 	bl	8000580 <__aeabi_dmul>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4630      	mov	r0, r6
 80061dc:	4639      	mov	r1, r7
 80061de:	f7fa f817 	bl	8000210 <__aeabi_dsub>
 80061e2:	f7fa fc67 	bl	8000ab4 <__aeabi_d2iz>
 80061e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061ea:	f84b 0b04 	str.w	r0, [fp], #4
 80061ee:	ec51 0b18 	vmov	r0, r1, d8
 80061f2:	f7fa f80f 	bl	8000214 <__adddf3>
 80061f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80061fa:	4606      	mov	r6, r0
 80061fc:	460f      	mov	r7, r1
 80061fe:	e75b      	b.n	80060b8 <__kernel_rem_pio2+0x108>
 8006200:	d106      	bne.n	8006210 <__kernel_rem_pio2+0x260>
 8006202:	1e63      	subs	r3, r4, #1
 8006204:	aa0c      	add	r2, sp, #48	; 0x30
 8006206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800620e:	e79d      	b.n	800614c <__kernel_rem_pio2+0x19c>
 8006210:	4b34      	ldr	r3, [pc, #208]	; (80062e4 <__kernel_rem_pio2+0x334>)
 8006212:	2200      	movs	r2, #0
 8006214:	f7fa fc3a 	bl	8000a8c <__aeabi_dcmpge>
 8006218:	2800      	cmp	r0, #0
 800621a:	d140      	bne.n	800629e <__kernel_rem_pio2+0x2ee>
 800621c:	4683      	mov	fp, r0
 800621e:	2200      	movs	r2, #0
 8006220:	2300      	movs	r3, #0
 8006222:	4630      	mov	r0, r6
 8006224:	4639      	mov	r1, r7
 8006226:	f7fa fc13 	bl	8000a50 <__aeabi_dcmpeq>
 800622a:	2800      	cmp	r0, #0
 800622c:	f000 80c1 	beq.w	80063b2 <__kernel_rem_pio2+0x402>
 8006230:	1e65      	subs	r5, r4, #1
 8006232:	462b      	mov	r3, r5
 8006234:	2200      	movs	r2, #0
 8006236:	9900      	ldr	r1, [sp, #0]
 8006238:	428b      	cmp	r3, r1
 800623a:	da6d      	bge.n	8006318 <__kernel_rem_pio2+0x368>
 800623c:	2a00      	cmp	r2, #0
 800623e:	f000 808a 	beq.w	8006356 <__kernel_rem_pio2+0x3a6>
 8006242:	ab0c      	add	r3, sp, #48	; 0x30
 8006244:	f1aa 0a18 	sub.w	sl, sl, #24
 8006248:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80ae 	beq.w	80063ae <__kernel_rem_pio2+0x3fe>
 8006252:	4650      	mov	r0, sl
 8006254:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80062c8 <__kernel_rem_pio2+0x318>
 8006258:	f000 f9fa 	bl	8006650 <scalbn>
 800625c:	1c6b      	adds	r3, r5, #1
 800625e:	00da      	lsls	r2, r3, #3
 8006260:	9205      	str	r2, [sp, #20]
 8006262:	ec57 6b10 	vmov	r6, r7, d0
 8006266:	aa70      	add	r2, sp, #448	; 0x1c0
 8006268:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80062dc <__kernel_rem_pio2+0x32c>
 800626c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006270:	462c      	mov	r4, r5
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	2c00      	cmp	r4, #0
 8006278:	f280 80d4 	bge.w	8006424 <__kernel_rem_pio2+0x474>
 800627c:	462c      	mov	r4, r5
 800627e:	2c00      	cmp	r4, #0
 8006280:	f2c0 8102 	blt.w	8006488 <__kernel_rem_pio2+0x4d8>
 8006284:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <__kernel_rem_pio2+0x338>)
 8006286:	461e      	mov	r6, r3
 8006288:	ab70      	add	r3, sp, #448	; 0x1c0
 800628a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800628e:	1b2b      	subs	r3, r5, r4
 8006290:	f04f 0900 	mov.w	r9, #0
 8006294:	f04f 0a00 	mov.w	sl, #0
 8006298:	2700      	movs	r7, #0
 800629a:	9306      	str	r3, [sp, #24]
 800629c:	e0e6      	b.n	800646c <__kernel_rem_pio2+0x4bc>
 800629e:	f04f 0b02 	mov.w	fp, #2
 80062a2:	e756      	b.n	8006152 <__kernel_rem_pio2+0x1a2>
 80062a4:	f8d8 3000 	ldr.w	r3, [r8]
 80062a8:	bb05      	cbnz	r5, 80062ec <__kernel_rem_pio2+0x33c>
 80062aa:	b123      	cbz	r3, 80062b6 <__kernel_rem_pio2+0x306>
 80062ac:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80062b0:	f8c8 3000 	str.w	r3, [r8]
 80062b4:	2301      	movs	r3, #1
 80062b6:	3201      	adds	r2, #1
 80062b8:	f108 0804 	add.w	r8, r8, #4
 80062bc:	461d      	mov	r5, r3
 80062be:	e74f      	b.n	8006160 <__kernel_rem_pio2+0x1b0>
	...
 80062cc:	3ff00000 	.word	0x3ff00000
 80062d0:	08006a40 	.word	0x08006a40
 80062d4:	40200000 	.word	0x40200000
 80062d8:	3ff00000 	.word	0x3ff00000
 80062dc:	3e700000 	.word	0x3e700000
 80062e0:	41700000 	.word	0x41700000
 80062e4:	3fe00000 	.word	0x3fe00000
 80062e8:	08006a00 	.word	0x08006a00
 80062ec:	1acb      	subs	r3, r1, r3
 80062ee:	f8c8 3000 	str.w	r3, [r8]
 80062f2:	462b      	mov	r3, r5
 80062f4:	e7df      	b.n	80062b6 <__kernel_rem_pio2+0x306>
 80062f6:	1e62      	subs	r2, r4, #1
 80062f8:	ab0c      	add	r3, sp, #48	; 0x30
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006302:	a90c      	add	r1, sp, #48	; 0x30
 8006304:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006308:	e738      	b.n	800617c <__kernel_rem_pio2+0x1cc>
 800630a:	1e62      	subs	r2, r4, #1
 800630c:	ab0c      	add	r3, sp, #48	; 0x30
 800630e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006312:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006316:	e7f4      	b.n	8006302 <__kernel_rem_pio2+0x352>
 8006318:	a90c      	add	r1, sp, #48	; 0x30
 800631a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800631e:	3b01      	subs	r3, #1
 8006320:	430a      	orrs	r2, r1
 8006322:	e788      	b.n	8006236 <__kernel_rem_pio2+0x286>
 8006324:	3301      	adds	r3, #1
 8006326:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800632a:	2900      	cmp	r1, #0
 800632c:	d0fa      	beq.n	8006324 <__kernel_rem_pio2+0x374>
 800632e:	9a08      	ldr	r2, [sp, #32]
 8006330:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006334:	446a      	add	r2, sp
 8006336:	3a98      	subs	r2, #152	; 0x98
 8006338:	9208      	str	r2, [sp, #32]
 800633a:	9a06      	ldr	r2, [sp, #24]
 800633c:	a920      	add	r1, sp, #128	; 0x80
 800633e:	18a2      	adds	r2, r4, r2
 8006340:	18e3      	adds	r3, r4, r3
 8006342:	f104 0801 	add.w	r8, r4, #1
 8006346:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800634a:	9302      	str	r3, [sp, #8]
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	4543      	cmp	r3, r8
 8006350:	da04      	bge.n	800635c <__kernel_rem_pio2+0x3ac>
 8006352:	461c      	mov	r4, r3
 8006354:	e6a2      	b.n	800609c <__kernel_rem_pio2+0xec>
 8006356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006358:	2301      	movs	r3, #1
 800635a:	e7e4      	b.n	8006326 <__kernel_rem_pio2+0x376>
 800635c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006362:	f7fa f8a3 	bl	80004ac <__aeabi_i2d>
 8006366:	e8e5 0102 	strd	r0, r1, [r5], #8
 800636a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636c:	46ab      	mov	fp, r5
 800636e:	461c      	mov	r4, r3
 8006370:	f04f 0900 	mov.w	r9, #0
 8006374:	2600      	movs	r6, #0
 8006376:	2700      	movs	r7, #0
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	4599      	cmp	r9, r3
 800637c:	dd06      	ble.n	800638c <__kernel_rem_pio2+0x3dc>
 800637e:	9b08      	ldr	r3, [sp, #32]
 8006380:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006384:	f108 0801 	add.w	r8, r8, #1
 8006388:	9308      	str	r3, [sp, #32]
 800638a:	e7df      	b.n	800634c <__kernel_rem_pio2+0x39c>
 800638c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006390:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006394:	f7fa f8f4 	bl	8000580 <__aeabi_dmul>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4630      	mov	r0, r6
 800639e:	4639      	mov	r1, r7
 80063a0:	f7f9 ff38 	bl	8000214 <__adddf3>
 80063a4:	f109 0901 	add.w	r9, r9, #1
 80063a8:	4606      	mov	r6, r0
 80063aa:	460f      	mov	r7, r1
 80063ac:	e7e4      	b.n	8006378 <__kernel_rem_pio2+0x3c8>
 80063ae:	3d01      	subs	r5, #1
 80063b0:	e747      	b.n	8006242 <__kernel_rem_pio2+0x292>
 80063b2:	ec47 6b10 	vmov	d0, r6, r7
 80063b6:	f1ca 0000 	rsb	r0, sl, #0
 80063ba:	f000 f949 	bl	8006650 <scalbn>
 80063be:	ec57 6b10 	vmov	r6, r7, d0
 80063c2:	4ba0      	ldr	r3, [pc, #640]	; (8006644 <__kernel_rem_pio2+0x694>)
 80063c4:	ee10 0a10 	vmov	r0, s0
 80063c8:	2200      	movs	r2, #0
 80063ca:	4639      	mov	r1, r7
 80063cc:	f7fa fb5e 	bl	8000a8c <__aeabi_dcmpge>
 80063d0:	b1f8      	cbz	r0, 8006412 <__kernel_rem_pio2+0x462>
 80063d2:	4b9d      	ldr	r3, [pc, #628]	; (8006648 <__kernel_rem_pio2+0x698>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	4630      	mov	r0, r6
 80063d8:	4639      	mov	r1, r7
 80063da:	f7fa f8d1 	bl	8000580 <__aeabi_dmul>
 80063de:	f7fa fb69 	bl	8000ab4 <__aeabi_d2iz>
 80063e2:	4680      	mov	r8, r0
 80063e4:	f7fa f862 	bl	80004ac <__aeabi_i2d>
 80063e8:	4b96      	ldr	r3, [pc, #600]	; (8006644 <__kernel_rem_pio2+0x694>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	f7fa f8c8 	bl	8000580 <__aeabi_dmul>
 80063f0:	460b      	mov	r3, r1
 80063f2:	4602      	mov	r2, r0
 80063f4:	4639      	mov	r1, r7
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7f9 ff0a 	bl	8000210 <__aeabi_dsub>
 80063fc:	f7fa fb5a 	bl	8000ab4 <__aeabi_d2iz>
 8006400:	1c65      	adds	r5, r4, #1
 8006402:	ab0c      	add	r3, sp, #48	; 0x30
 8006404:	f10a 0a18 	add.w	sl, sl, #24
 8006408:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800640c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006410:	e71f      	b.n	8006252 <__kernel_rem_pio2+0x2a2>
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7fa fb4d 	bl	8000ab4 <__aeabi_d2iz>
 800641a:	ab0c      	add	r3, sp, #48	; 0x30
 800641c:	4625      	mov	r5, r4
 800641e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006422:	e716      	b.n	8006252 <__kernel_rem_pio2+0x2a2>
 8006424:	ab0c      	add	r3, sp, #48	; 0x30
 8006426:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800642a:	f7fa f83f 	bl	80004ac <__aeabi_i2d>
 800642e:	4632      	mov	r2, r6
 8006430:	463b      	mov	r3, r7
 8006432:	f7fa f8a5 	bl	8000580 <__aeabi_dmul>
 8006436:	4642      	mov	r2, r8
 8006438:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800643c:	464b      	mov	r3, r9
 800643e:	4630      	mov	r0, r6
 8006440:	4639      	mov	r1, r7
 8006442:	f7fa f89d 	bl	8000580 <__aeabi_dmul>
 8006446:	3c01      	subs	r4, #1
 8006448:	4606      	mov	r6, r0
 800644a:	460f      	mov	r7, r1
 800644c:	e713      	b.n	8006276 <__kernel_rem_pio2+0x2c6>
 800644e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006452:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006456:	f7fa f893 	bl	8000580 <__aeabi_dmul>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4648      	mov	r0, r9
 8006460:	4651      	mov	r1, sl
 8006462:	f7f9 fed7 	bl	8000214 <__adddf3>
 8006466:	3701      	adds	r7, #1
 8006468:	4681      	mov	r9, r0
 800646a:	468a      	mov	sl, r1
 800646c:	9b00      	ldr	r3, [sp, #0]
 800646e:	429f      	cmp	r7, r3
 8006470:	dc02      	bgt.n	8006478 <__kernel_rem_pio2+0x4c8>
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	429f      	cmp	r7, r3
 8006476:	ddea      	ble.n	800644e <__kernel_rem_pio2+0x49e>
 8006478:	9a06      	ldr	r2, [sp, #24]
 800647a:	ab48      	add	r3, sp, #288	; 0x120
 800647c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006480:	e9c6 9a00 	strd	r9, sl, [r6]
 8006484:	3c01      	subs	r4, #1
 8006486:	e6fa      	b.n	800627e <__kernel_rem_pio2+0x2ce>
 8006488:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800648a:	2b02      	cmp	r3, #2
 800648c:	dc0b      	bgt.n	80064a6 <__kernel_rem_pio2+0x4f6>
 800648e:	2b00      	cmp	r3, #0
 8006490:	dc39      	bgt.n	8006506 <__kernel_rem_pio2+0x556>
 8006492:	d05d      	beq.n	8006550 <__kernel_rem_pio2+0x5a0>
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	f003 0007 	and.w	r0, r3, #7
 800649a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800649e:	ecbd 8b02 	vpop	{d8}
 80064a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d1f3      	bne.n	8006494 <__kernel_rem_pio2+0x4e4>
 80064ac:	9b05      	ldr	r3, [sp, #20]
 80064ae:	9500      	str	r5, [sp, #0]
 80064b0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80064b4:	eb0d 0403 	add.w	r4, sp, r3
 80064b8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80064bc:	46a2      	mov	sl, r4
 80064be:	9b00      	ldr	r3, [sp, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f1aa 0a08 	sub.w	sl, sl, #8
 80064c6:	dc69      	bgt.n	800659c <__kernel_rem_pio2+0x5ec>
 80064c8:	46aa      	mov	sl, r5
 80064ca:	f1ba 0f01 	cmp.w	sl, #1
 80064ce:	f1a4 0408 	sub.w	r4, r4, #8
 80064d2:	f300 8083 	bgt.w	80065dc <__kernel_rem_pio2+0x62c>
 80064d6:	9c05      	ldr	r4, [sp, #20]
 80064d8:	ab48      	add	r3, sp, #288	; 0x120
 80064da:	441c      	add	r4, r3
 80064dc:	2000      	movs	r0, #0
 80064de:	2100      	movs	r1, #0
 80064e0:	2d01      	cmp	r5, #1
 80064e2:	f300 809a 	bgt.w	800661a <__kernel_rem_pio2+0x66a>
 80064e6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80064ea:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80064ee:	f1bb 0f00 	cmp.w	fp, #0
 80064f2:	f040 8098 	bne.w	8006626 <__kernel_rem_pio2+0x676>
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	e9c3 7800 	strd	r7, r8, [r3]
 80064fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006500:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006504:	e7c6      	b.n	8006494 <__kernel_rem_pio2+0x4e4>
 8006506:	9e05      	ldr	r6, [sp, #20]
 8006508:	ab48      	add	r3, sp, #288	; 0x120
 800650a:	441e      	add	r6, r3
 800650c:	462c      	mov	r4, r5
 800650e:	2000      	movs	r0, #0
 8006510:	2100      	movs	r1, #0
 8006512:	2c00      	cmp	r4, #0
 8006514:	da33      	bge.n	800657e <__kernel_rem_pio2+0x5ce>
 8006516:	f1bb 0f00 	cmp.w	fp, #0
 800651a:	d036      	beq.n	800658a <__kernel_rem_pio2+0x5da>
 800651c:	4602      	mov	r2, r0
 800651e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006522:	9c04      	ldr	r4, [sp, #16]
 8006524:	e9c4 2300 	strd	r2, r3, [r4]
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006530:	f7f9 fe6e 	bl	8000210 <__aeabi_dsub>
 8006534:	ae4a      	add	r6, sp, #296	; 0x128
 8006536:	2401      	movs	r4, #1
 8006538:	42a5      	cmp	r5, r4
 800653a:	da29      	bge.n	8006590 <__kernel_rem_pio2+0x5e0>
 800653c:	f1bb 0f00 	cmp.w	fp, #0
 8006540:	d002      	beq.n	8006548 <__kernel_rem_pio2+0x598>
 8006542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006546:	4619      	mov	r1, r3
 8006548:	9b04      	ldr	r3, [sp, #16]
 800654a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800654e:	e7a1      	b.n	8006494 <__kernel_rem_pio2+0x4e4>
 8006550:	9c05      	ldr	r4, [sp, #20]
 8006552:	ab48      	add	r3, sp, #288	; 0x120
 8006554:	441c      	add	r4, r3
 8006556:	2000      	movs	r0, #0
 8006558:	2100      	movs	r1, #0
 800655a:	2d00      	cmp	r5, #0
 800655c:	da09      	bge.n	8006572 <__kernel_rem_pio2+0x5c2>
 800655e:	f1bb 0f00 	cmp.w	fp, #0
 8006562:	d002      	beq.n	800656a <__kernel_rem_pio2+0x5ba>
 8006564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006568:	4619      	mov	r1, r3
 800656a:	9b04      	ldr	r3, [sp, #16]
 800656c:	e9c3 0100 	strd	r0, r1, [r3]
 8006570:	e790      	b.n	8006494 <__kernel_rem_pio2+0x4e4>
 8006572:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006576:	f7f9 fe4d 	bl	8000214 <__adddf3>
 800657a:	3d01      	subs	r5, #1
 800657c:	e7ed      	b.n	800655a <__kernel_rem_pio2+0x5aa>
 800657e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006582:	f7f9 fe47 	bl	8000214 <__adddf3>
 8006586:	3c01      	subs	r4, #1
 8006588:	e7c3      	b.n	8006512 <__kernel_rem_pio2+0x562>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	e7c8      	b.n	8006522 <__kernel_rem_pio2+0x572>
 8006590:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006594:	f7f9 fe3e 	bl	8000214 <__adddf3>
 8006598:	3401      	adds	r4, #1
 800659a:	e7cd      	b.n	8006538 <__kernel_rem_pio2+0x588>
 800659c:	e9da 8900 	ldrd	r8, r9, [sl]
 80065a0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80065a4:	9b00      	ldr	r3, [sp, #0]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4632      	mov	r2, r6
 80065ac:	463b      	mov	r3, r7
 80065ae:	4640      	mov	r0, r8
 80065b0:	4649      	mov	r1, r9
 80065b2:	f7f9 fe2f 	bl	8000214 <__adddf3>
 80065b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4640      	mov	r0, r8
 80065c0:	4649      	mov	r1, r9
 80065c2:	f7f9 fe25 	bl	8000210 <__aeabi_dsub>
 80065c6:	4632      	mov	r2, r6
 80065c8:	463b      	mov	r3, r7
 80065ca:	f7f9 fe23 	bl	8000214 <__adddf3>
 80065ce:	ed9d 7b06 	vldr	d7, [sp, #24]
 80065d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065d6:	ed8a 7b00 	vstr	d7, [sl]
 80065da:	e770      	b.n	80064be <__kernel_rem_pio2+0x50e>
 80065dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80065e0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80065e4:	4640      	mov	r0, r8
 80065e6:	4632      	mov	r2, r6
 80065e8:	463b      	mov	r3, r7
 80065ea:	4649      	mov	r1, r9
 80065ec:	f7f9 fe12 	bl	8000214 <__adddf3>
 80065f0:	e9cd 0100 	strd	r0, r1, [sp]
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7f9 fe08 	bl	8000210 <__aeabi_dsub>
 8006600:	4632      	mov	r2, r6
 8006602:	463b      	mov	r3, r7
 8006604:	f7f9 fe06 	bl	8000214 <__adddf3>
 8006608:	ed9d 7b00 	vldr	d7, [sp]
 800660c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006610:	ed84 7b00 	vstr	d7, [r4]
 8006614:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006618:	e757      	b.n	80064ca <__kernel_rem_pio2+0x51a>
 800661a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800661e:	f7f9 fdf9 	bl	8000214 <__adddf3>
 8006622:	3d01      	subs	r5, #1
 8006624:	e75c      	b.n	80064e0 <__kernel_rem_pio2+0x530>
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	9a04      	ldr	r2, [sp, #16]
 800662a:	601f      	str	r7, [r3, #0]
 800662c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006630:	605c      	str	r4, [r3, #4]
 8006632:	609d      	str	r5, [r3, #8]
 8006634:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006638:	60d3      	str	r3, [r2, #12]
 800663a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800663e:	6110      	str	r0, [r2, #16]
 8006640:	6153      	str	r3, [r2, #20]
 8006642:	e727      	b.n	8006494 <__kernel_rem_pio2+0x4e4>
 8006644:	41700000 	.word	0x41700000
 8006648:	3e700000 	.word	0x3e700000
 800664c:	00000000 	.word	0x00000000

08006650 <scalbn>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	ec55 4b10 	vmov	r4, r5, d0
 8006656:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800665a:	4606      	mov	r6, r0
 800665c:	462b      	mov	r3, r5
 800665e:	b999      	cbnz	r1, 8006688 <scalbn+0x38>
 8006660:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006664:	4323      	orrs	r3, r4
 8006666:	d03f      	beq.n	80066e8 <scalbn+0x98>
 8006668:	4b35      	ldr	r3, [pc, #212]	; (8006740 <scalbn+0xf0>)
 800666a:	4629      	mov	r1, r5
 800666c:	ee10 0a10 	vmov	r0, s0
 8006670:	2200      	movs	r2, #0
 8006672:	f7f9 ff85 	bl	8000580 <__aeabi_dmul>
 8006676:	4b33      	ldr	r3, [pc, #204]	; (8006744 <scalbn+0xf4>)
 8006678:	429e      	cmp	r6, r3
 800667a:	4604      	mov	r4, r0
 800667c:	460d      	mov	r5, r1
 800667e:	da10      	bge.n	80066a2 <scalbn+0x52>
 8006680:	a327      	add	r3, pc, #156	; (adr r3, 8006720 <scalbn+0xd0>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	e01f      	b.n	80066c8 <scalbn+0x78>
 8006688:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800668c:	4291      	cmp	r1, r2
 800668e:	d10c      	bne.n	80066aa <scalbn+0x5a>
 8006690:	ee10 2a10 	vmov	r2, s0
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7f9 fdbc 	bl	8000214 <__adddf3>
 800669c:	4604      	mov	r4, r0
 800669e:	460d      	mov	r5, r1
 80066a0:	e022      	b.n	80066e8 <scalbn+0x98>
 80066a2:	460b      	mov	r3, r1
 80066a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80066a8:	3936      	subs	r1, #54	; 0x36
 80066aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80066ae:	4296      	cmp	r6, r2
 80066b0:	dd0d      	ble.n	80066ce <scalbn+0x7e>
 80066b2:	2d00      	cmp	r5, #0
 80066b4:	a11c      	add	r1, pc, #112	; (adr r1, 8006728 <scalbn+0xd8>)
 80066b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ba:	da02      	bge.n	80066c2 <scalbn+0x72>
 80066bc:	a11c      	add	r1, pc, #112	; (adr r1, 8006730 <scalbn+0xe0>)
 80066be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c2:	a319      	add	r3, pc, #100	; (adr r3, 8006728 <scalbn+0xd8>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ff5a 	bl	8000580 <__aeabi_dmul>
 80066cc:	e7e6      	b.n	800669c <scalbn+0x4c>
 80066ce:	1872      	adds	r2, r6, r1
 80066d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066d4:	428a      	cmp	r2, r1
 80066d6:	dcec      	bgt.n	80066b2 <scalbn+0x62>
 80066d8:	2a00      	cmp	r2, #0
 80066da:	dd08      	ble.n	80066ee <scalbn+0x9e>
 80066dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066e8:	ec45 4b10 	vmov	d0, r4, r5
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
 80066ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066f2:	da08      	bge.n	8006706 <scalbn+0xb6>
 80066f4:	2d00      	cmp	r5, #0
 80066f6:	a10a      	add	r1, pc, #40	; (adr r1, 8006720 <scalbn+0xd0>)
 80066f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066fc:	dac0      	bge.n	8006680 <scalbn+0x30>
 80066fe:	a10e      	add	r1, pc, #56	; (adr r1, 8006738 <scalbn+0xe8>)
 8006700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006704:	e7bc      	b.n	8006680 <scalbn+0x30>
 8006706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800670a:	3236      	adds	r2, #54	; 0x36
 800670c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006710:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006714:	4620      	mov	r0, r4
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <scalbn+0xf8>)
 8006718:	2200      	movs	r2, #0
 800671a:	e7d5      	b.n	80066c8 <scalbn+0x78>
 800671c:	f3af 8000 	nop.w
 8006720:	c2f8f359 	.word	0xc2f8f359
 8006724:	01a56e1f 	.word	0x01a56e1f
 8006728:	8800759c 	.word	0x8800759c
 800672c:	7e37e43c 	.word	0x7e37e43c
 8006730:	8800759c 	.word	0x8800759c
 8006734:	fe37e43c 	.word	0xfe37e43c
 8006738:	c2f8f359 	.word	0xc2f8f359
 800673c:	81a56e1f 	.word	0x81a56e1f
 8006740:	43500000 	.word	0x43500000
 8006744:	ffff3cb0 	.word	0xffff3cb0
 8006748:	3c900000 	.word	0x3c900000
 800674c:	00000000 	.word	0x00000000

08006750 <floor>:
 8006750:	ec51 0b10 	vmov	r0, r1, d0
 8006754:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006760:	2e13      	cmp	r6, #19
 8006762:	ee10 5a10 	vmov	r5, s0
 8006766:	ee10 8a10 	vmov	r8, s0
 800676a:	460c      	mov	r4, r1
 800676c:	dc31      	bgt.n	80067d2 <floor+0x82>
 800676e:	2e00      	cmp	r6, #0
 8006770:	da14      	bge.n	800679c <floor+0x4c>
 8006772:	a333      	add	r3, pc, #204	; (adr r3, 8006840 <floor+0xf0>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 fd4c 	bl	8000214 <__adddf3>
 800677c:	2200      	movs	r2, #0
 800677e:	2300      	movs	r3, #0
 8006780:	f7fa f98e 	bl	8000aa0 <__aeabi_dcmpgt>
 8006784:	b138      	cbz	r0, 8006796 <floor+0x46>
 8006786:	2c00      	cmp	r4, #0
 8006788:	da53      	bge.n	8006832 <floor+0xe2>
 800678a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800678e:	4325      	orrs	r5, r4
 8006790:	d052      	beq.n	8006838 <floor+0xe8>
 8006792:	4c2d      	ldr	r4, [pc, #180]	; (8006848 <floor+0xf8>)
 8006794:	2500      	movs	r5, #0
 8006796:	4621      	mov	r1, r4
 8006798:	4628      	mov	r0, r5
 800679a:	e024      	b.n	80067e6 <floor+0x96>
 800679c:	4f2b      	ldr	r7, [pc, #172]	; (800684c <floor+0xfc>)
 800679e:	4137      	asrs	r7, r6
 80067a0:	ea01 0307 	and.w	r3, r1, r7
 80067a4:	4303      	orrs	r3, r0
 80067a6:	d01e      	beq.n	80067e6 <floor+0x96>
 80067a8:	a325      	add	r3, pc, #148	; (adr r3, 8006840 <floor+0xf0>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fd31 	bl	8000214 <__adddf3>
 80067b2:	2200      	movs	r2, #0
 80067b4:	2300      	movs	r3, #0
 80067b6:	f7fa f973 	bl	8000aa0 <__aeabi_dcmpgt>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d0eb      	beq.n	8006796 <floor+0x46>
 80067be:	2c00      	cmp	r4, #0
 80067c0:	bfbe      	ittt	lt
 80067c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80067c6:	4133      	asrlt	r3, r6
 80067c8:	18e4      	addlt	r4, r4, r3
 80067ca:	ea24 0407 	bic.w	r4, r4, r7
 80067ce:	2500      	movs	r5, #0
 80067d0:	e7e1      	b.n	8006796 <floor+0x46>
 80067d2:	2e33      	cmp	r6, #51	; 0x33
 80067d4:	dd0b      	ble.n	80067ee <floor+0x9e>
 80067d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80067da:	d104      	bne.n	80067e6 <floor+0x96>
 80067dc:	ee10 2a10 	vmov	r2, s0
 80067e0:	460b      	mov	r3, r1
 80067e2:	f7f9 fd17 	bl	8000214 <__adddf3>
 80067e6:	ec41 0b10 	vmov	d0, r0, r1
 80067ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80067f2:	f04f 37ff 	mov.w	r7, #4294967295
 80067f6:	40df      	lsrs	r7, r3
 80067f8:	4238      	tst	r0, r7
 80067fa:	d0f4      	beq.n	80067e6 <floor+0x96>
 80067fc:	a310      	add	r3, pc, #64	; (adr r3, 8006840 <floor+0xf0>)
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f7f9 fd07 	bl	8000214 <__adddf3>
 8006806:	2200      	movs	r2, #0
 8006808:	2300      	movs	r3, #0
 800680a:	f7fa f949 	bl	8000aa0 <__aeabi_dcmpgt>
 800680e:	2800      	cmp	r0, #0
 8006810:	d0c1      	beq.n	8006796 <floor+0x46>
 8006812:	2c00      	cmp	r4, #0
 8006814:	da0a      	bge.n	800682c <floor+0xdc>
 8006816:	2e14      	cmp	r6, #20
 8006818:	d101      	bne.n	800681e <floor+0xce>
 800681a:	3401      	adds	r4, #1
 800681c:	e006      	b.n	800682c <floor+0xdc>
 800681e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006822:	2301      	movs	r3, #1
 8006824:	40b3      	lsls	r3, r6
 8006826:	441d      	add	r5, r3
 8006828:	45a8      	cmp	r8, r5
 800682a:	d8f6      	bhi.n	800681a <floor+0xca>
 800682c:	ea25 0507 	bic.w	r5, r5, r7
 8006830:	e7b1      	b.n	8006796 <floor+0x46>
 8006832:	2500      	movs	r5, #0
 8006834:	462c      	mov	r4, r5
 8006836:	e7ae      	b.n	8006796 <floor+0x46>
 8006838:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800683c:	e7ab      	b.n	8006796 <floor+0x46>
 800683e:	bf00      	nop
 8006840:	8800759c 	.word	0x8800759c
 8006844:	7e37e43c 	.word	0x7e37e43c
 8006848:	bff00000 	.word	0xbff00000
 800684c:	000fffff 	.word	0x000fffff

08006850 <_init>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	bf00      	nop
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr

0800685c <_fini>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr
